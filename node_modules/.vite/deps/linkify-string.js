import {
  Options,
  tokenize
} from "./chunk-OSERKPX4.js";
import "./chunk-7REXU52E.js";

// node_modules/linkify-string/dist/linkify-string.es.js
function escapeText(text) {
  return text.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
}
function escapeAttr(href) {
  return href.replace(/"/g, "&quot;");
}
function attributesToString(attributes) {
  const result = [];
  for (const attr in attributes) {
    let val = attributes[attr] + "";
    result.push(`${attr}="${escapeAttr(val)}"`);
  }
  return result.join(" ");
}
function defaultRender(_ref) {
  let {
    tagName,
    attributes,
    content
  } = _ref;
  return `<${tagName} ${attributesToString(attributes)}>${escapeText(content)}</${tagName}>`;
}
function linkifyStr(str, opts) {
  if (opts === void 0) {
    opts = {};
  }
  opts = new Options(opts, defaultRender);
  const tokens = tokenize(str);
  const result = [];
  for (let i = 0; i < tokens.length; i++) {
    const token = tokens[i];
    if (token.t === "nl" && opts.get("nl2br")) {
      result.push("<br>\n");
    } else if (!token.isLink || !opts.check(token)) {
      result.push(escapeText(token.toString()));
    } else {
      result.push(opts.render(token));
    }
  }
  return result.join("");
}
if (!String.prototype.linkify) {
  Object.defineProperty(String.prototype, "linkify", {
    writable: false,
    value: function linkify(options) {
      return linkifyStr(this, options);
    }
  });
}
export {
  linkifyStr as default
};
//# sourceMappingURL=linkify-string.js.map
