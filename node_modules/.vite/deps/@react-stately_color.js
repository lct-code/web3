import {
  $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5,
  $6c7bd7858deea686$export$cd11ab140839f11d
} from "./chunk-AKSKGVMG.js";
import {
  $458b0a5536c1a7cf$export$40bfa8c7b0832715,
  $9446cca9a3875146$export$7d15b64cf5a3a4c4,
  $9446cca9a3875146$export$b6268554fba451f,
  $9446cca9a3875146$export$cb6e0bb50bc19463
} from "./chunk-ZMUGWMRD.js";
import {
  require_react
} from "./chunk-UOUPSHR4.js";
import {
  __toESM
} from "./chunk-7REXU52E.js";

// node_modules/@react-stately/color/dist/ar-AE.mjs
var $2d805fd52bb48883$exports = {};
$2d805fd52bb48883$exports = {
  "alpha": `ألفا`,
  "black": `أسود`,
  "blue": `أزرق`,
  "blue purple": `أرجواني مزرق`,
  "brightness": `السطوع`,
  "brown": `بني`,
  "brown yellow": `أصفر بني`,
  "colorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}`,
  "cyan": `سماوي`,
  "cyan blue": `أزرق سماوي`,
  "dark": `داكن`,
  "gray": `رمادي`,
  "grayish": `مائل للرمادي`,
  "green": `أخضر`,
  "green cyan": `سماوي مخضر`,
  "hue": `درجة اللون`,
  "light": `فاتح`,
  "lightness": `الإضاءة`,
  "magenta": `أرجواني`,
  "magenta pink": `أرجواني وردي`,
  "orange": `برتقالي`,
  "orange yellow": `أصفر برتقالي`,
  "pale": `باهت`,
  "pink": `وردي`,
  "pink red": `أحمر وردي`,
  "purple": `أرجواني`,
  "purple magenta": `بنفسجي`,
  "red": `أحمر`,
  "red orange": `برتقالي محمر`,
  "saturation": `التشبع`,
  "transparentColorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} شفاف`,
  "very dark": `داكن جدًا`,
  "very light": `فاتح جدًا`,
  "vibrant": `ساطع`,
  "white": `أبيض`,
  "yellow": `أصفر`,
  "yellow green": `أخضر مصفر`
};

// node_modules/@react-stately/color/dist/bg-BG.mjs
var $6c28468dc1df643c$exports = {};
$6c28468dc1df643c$exports = {
  "alpha": `Алфа`,
  "black": `черно`,
  "blue": `Синьо`,
  "blue purple": `синьо лилаво`,
  "brightness": `Яркост`,
  "brown": `кафяво`,
  "brown yellow": `кафяво жълто`,
  "colorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}`,
  "cyan": `циан`,
  "cyan blue": `циан синьо`,
  "dark": `тъмно`,
  "gray": `сиво`,
  "grayish": `сивкав`,
  "green": `Зелено`,
  "green cyan": `зелен циан`,
  "hue": `Оттенък`,
  "light": `светло`,
  "lightness": `Лекота`,
  "magenta": `магента`,
  "magenta pink": `магента розово`,
  "orange": `оранжево`,
  "orange yellow": `оранжево жълто`,
  "pale": `бледо`,
  "pink": `розово`,
  "pink red": `розово червено`,
  "purple": `лилаво`,
  "purple magenta": `лилаво магента`,
  "red": `Червено`,
  "red orange": `червен портокал`,
  "saturation": `Наситеност`,
  "transparentColorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} прозрачен`,
  "very dark": `много тъмно`,
  "very light": `много светло`,
  "vibrant": ` ярко`,
  "white": `бяло`,
  "yellow": `жълто`,
  "yellow green": `жълто зелен`
};

// node_modules/@react-stately/color/dist/cs-CZ.mjs
var $807554f8230db0ed$exports = {};
$807554f8230db0ed$exports = {
  "alpha": `Alfa`,
  "black": `černá`,
  "blue": `Modrá`,
  "blue purple": `modrofialová`,
  "brightness": `Jas`,
  "brown": `hnědá`,
  "brown yellow": `hnědožlutá`,
  "colorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}`,
  "cyan": `tyrkysová`,
  "cyan blue": `tyrkysovomodrá`,
  "dark": `tmavá`,
  "gray": `šedá`,
  "grayish": `našedlá`,
  "green": `Zelená`,
  "green cyan": `zelenotyrkysová`,
  "hue": `Odstín`,
  "light": `světlá`,
  "lightness": `Světlost`,
  "magenta": `purpurová`,
  "magenta pink": `purpurově růžová`,
  "orange": `oranžová`,
  "orange yellow": `oranžovožlutá`,
  "pale": `bledá`,
  "pink": `růžová`,
  "pink red": `růžovočervená`,
  "purple": `fialová`,
  "purple magenta": `fialově purpurová`,
  "red": `Červená`,
  "red orange": `červenooranžová`,
  "saturation": `Sytost`,
  "transparentColorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} průhledné`,
  "very dark": `velmi tmavá`,
  "very light": `velmi světlá`,
  "vibrant": `zářivá`,
  "white": `bílá`,
  "yellow": `žlutá`,
  "yellow green": `žlutozelená`
};

// node_modules/@react-stately/color/dist/da-DK.mjs
var $7097f64386f1761c$exports = {};
$7097f64386f1761c$exports = {
  "alpha": `Alfa`,
  "black": `sort`,
  "blue": `Blå`,
  "blue purple": `blålilla`,
  "brightness": `Lysstyrke`,
  "brown": `brun`,
  "brown yellow": `brungul`,
  "colorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}`,
  "cyan": `cyan`,
  "cyan blue": `cyan blå`,
  "dark": `mørk`,
  "gray": `grå`,
  "grayish": `grålig`,
  "green": `Grøn`,
  "green cyan": `grøn cyan`,
  "hue": `Tone`,
  "light": `lys`,
  "lightness": `Lyshed`,
  "magenta": `magenta`,
  "magenta pink": `magenta pink`,
  "orange": `orange`,
  "orange yellow": `orangegul`,
  "pale": `bleg`,
  "pink": `lyserød`,
  "pink red": `lyserødlig rød`,
  "purple": `lilla`,
  "purple magenta": `lilla magenta`,
  "red": `Rød`,
  "red orange": `rødorange`,
  "saturation": `Farvemætning`,
  "transparentColorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} gennemsigtig`,
  "very dark": `meget mørk`,
  "very light": `meget lys`,
  "vibrant": `klar`,
  "white": `hvid`,
  "yellow": `gul`,
  "yellow green": `gulgrøn`
};

// node_modules/@react-stately/color/dist/de-DE.mjs
var $bdd847d8beb08799$exports = {};
$bdd847d8beb08799$exports = {
  "alpha": `Alpha`,
  "black": `Schwarz`,
  "blue": `Blau`,
  "blue purple": `Blaulila`,
  "brightness": `Helligkeit`,
  "brown": `Braun`,
  "brown yellow": `Braungelb`,
  "colorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}`,
  "cyan": `Cyan`,
  "cyan blue": `Cyanblau`,
  "dark": `dunkles`,
  "gray": `Grau`,
  "grayish": `gräuliches`,
  "green": `Grün`,
  "green cyan": `Grüncyan`,
  "hue": `Farbton`,
  "light": `helles`,
  "lightness": `Leuchtkraft`,
  "magenta": `Magenta`,
  "magenta pink": `Magentarosa`,
  "orange": `Orange`,
  "orange yellow": `Orangegelb`,
  "pale": `blasses`,
  "pink": `Rosa`,
  "pink red": `Rosarot`,
  "purple": `Lila`,
  "purple magenta": `Lilamagenta`,
  "red": `Rot`,
  "red orange": `Rotorange`,
  "saturation": `Sättigung`,
  "transparentColorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}, zu ${args.percentTransparent} transparent`,
  "very dark": `sehr dunkles`,
  "very light": `sehr helles`,
  "vibrant": `lebhaftes`,
  "white": `Weiß`,
  "yellow": `Gelb`,
  "yellow green": `Gelbgrün`
};

// node_modules/@react-stately/color/dist/el-GR.mjs
var $a53e00b683950971$exports = {};
$a53e00b683950971$exports = {
  "alpha": `Άλφα`,
  "black": `μαύρο`,
  "blue": `Μπλε`,
  "blue purple": `μπλε μωβ`,
  "brightness": `Φωτεινότητα`,
  "brown": `καφέ`,
  "brown yellow": `καφέ κίτρινο`,
  "colorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}`,
  "cyan": `κυανό`,
  "cyan blue": `κυανό μπλε`,
  "dark": `σκούρο`,
  "gray": `γκρι`,
  "grayish": `γκριζωπό`,
  "green": `Πράσινο`,
  "green cyan": `πράσινο κυανό`,
  "hue": `Τόνος`,
  "light": `ανοιχτό`,
  "lightness": `Φωτεινότητα`,
  "magenta": `ματζέντα`,
  "magenta pink": `ματζέντα ροζ`,
  "orange": `πορτοκαλί`,
  "orange yellow": `πορτοκαλί κίτρινο`,
  "pale": `ανοιχτό`,
  "pink": `ροζ`,
  "pink red": `ροζ κόκκινο`,
  "purple": `μωβ`,
  "purple magenta": `μωβ ματζέντα`,
  "red": `Κόκκινο`,
  "red orange": `κόκκινο πορτοκαλί`,
  "saturation": `Κορεσμός`,
  "transparentColorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} διαφανές`,
  "very dark": `πολύ σκούρο`,
  "very light": `πολύ ανοιχτό`,
  "vibrant": `έντονο`,
  "white": `λευκό`,
  "yellow": `κίτρινο`,
  "yellow green": `κίτρινο πράσινο`
};

// node_modules/@react-stately/color/dist/en-US.mjs
var $21cdd87e84f28d89$exports = {};
$21cdd87e84f28d89$exports = {
  "hue": `Hue`,
  "saturation": `Saturation`,
  "lightness": `Lightness`,
  "brightness": `Brightness`,
  "red": `Red`,
  "green": `Green`,
  "blue": `Blue`,
  "alpha": `Alpha`,
  "colorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}`,
  "transparentColorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} transparent`,
  "very dark": `very dark`,
  "dark": `dark`,
  "light": `light`,
  "very light": `very light`,
  "pale": `pale`,
  "grayish": `grayish`,
  "vibrant": `vibrant`,
  "black": `black`,
  "white": `white`,
  "gray": `gray`,
  "pink": `pink`,
  "pink red": `pink red`,
  "red orange": `red orange`,
  "brown": `brown`,
  "orange": `orange`,
  "orange yellow": `orange yellow`,
  "brown yellow": `brown yellow`,
  "yellow": `yellow`,
  "yellow green": `yellow green`,
  "green cyan": `green cyan`,
  "cyan": `cyan`,
  "cyan blue": `cyan blue`,
  "blue purple": `blue purple`,
  "purple": `purple`,
  "purple magenta": `purple magenta`,
  "magenta": `magenta`,
  "magenta pink": `magenta pink`
};

// node_modules/@react-stately/color/dist/es-ES.mjs
var $92fee9698e4d675a$exports = {};
$92fee9698e4d675a$exports = {
  "alpha": `Alpha`,
  "black": `negro`,
  "blue": `Azul`,
  "blue purple": `púrpura azulado`,
  "brightness": `Brillo`,
  "brown": `marrón`,
  "brown yellow": `amarillo amarronado`,
  "colorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}`,
  "cyan": `cian`,
  "cyan blue": `azul cian`,
  "dark": `oscuro`,
  "gray": `gris`,
  "grayish": `grisáceo`,
  "green": `Verde`,
  "green cyan": `cian verdoso`,
  "hue": `Tono`,
  "light": `claro`,
  "lightness": `Luminosidad`,
  "magenta": `magenta`,
  "magenta pink": `rosa magenta`,
  "orange": `naranja`,
  "orange yellow": `amarillo anaranjado`,
  "pale": `pálido`,
  "pink": `rosa`,
  "pink red": `rojo rosado`,
  "purple": `morado`,
  "purple magenta": `magenta violáceo`,
  "red": `Rojo`,
  "red orange": `naranja rojizo`,
  "saturation": `Saturación`,
  "transparentColorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} transparente`,
  "very dark": `muy oscuro`,
  "very light": `muy claro`,
  "vibrant": `intenso`,
  "white": `blanco`,
  "yellow": `amarillo`,
  "yellow green": `verde amarillento`
};

// node_modules/@react-stately/color/dist/et-EE.mjs
var $7ea012e91a5ad3ee$exports = {};
$7ea012e91a5ad3ee$exports = {
  "alpha": `Alfa`,
  "black": `must`,
  "blue": `Sinine`,
  "blue purple": `sinakaslilla`,
  "brightness": `Heledus`,
  "brown": `pruun`,
  "brown yellow": `pruunikaskollane`,
  "colorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}`,
  "cyan": `tsüaan`,
  "cyan blue": `tsüaansinine`,
  "dark": `tume`,
  "gray": `hall`,
  "grayish": `hallikas`,
  "green": `Roheline`,
  "green cyan": `tsüaanroheline`,
  "hue": `Värv`,
  "light": `valgus`,
  "lightness": `Valgus`,
  "magenta": `magentapunane`,
  "magenta pink": `magentaroosa`,
  "orange": `oranž`,
  "orange yellow": `oranžikaskollane`,
  "pale": `kahvatu`,
  "pink": `roosa`,
  "pink red": `vaarikapunane`,
  "purple": `lilla`,
  "purple magenta": `purpurne magenta`,
  "red": `Punane`,
  "red orange": `punakasoranž`,
  "saturation": `Küllastus`,
  "transparentColorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} läbipaistev`,
  "very dark": `väga tume`,
  "very light": `väga hele`,
  "vibrant": `ere`,
  "white": `valge`,
  "yellow": `kollane`,
  "yellow green": `kollakasroheline`
};

// node_modules/@react-stately/color/dist/fi-FI.mjs
var $8460c13bb2d75345$exports = {};
$8460c13bb2d75345$exports = {
  "alpha": `Alpha`,
  "black": `musta`,
  "blue": `Sininen`,
  "blue purple": `sinivioletti`,
  "brightness": `Kirkkaus`,
  "brown": `ruskea`,
  "brown yellow": `ruskeankeltainen`,
  "colorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}`,
  "cyan": `syaani`,
  "cyan blue": `syaaninsininen`,
  "dark": `tumma`,
  "gray": `harmaa`,
  "grayish": `harmahtava`,
  "green": `Vihreä`,
  "green cyan": `vihreänsyaani`,
  "hue": `Sävy`,
  "light": `vaalea`,
  "lightness": `Valomäärä`,
  "magenta": `magenta`,
  "magenta pink": `magentapinkki`,
  "orange": `oranssi`,
  "orange yellow": `oranssinkeltainen`,
  "pale": `vaalea`,
  "pink": `pinkki`,
  "pink red": `vaaleanpunainen`,
  "purple": `violetti`,
  "purple magenta": `violettimagenta`,
  "red": `Punainen`,
  "red orange": `punaoranssi`,
  "saturation": `Värikylläisyys`,
  "transparentColorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} läpinäkyvä`,
  "very dark": `hyvin tumma`,
  "very light": `erittäin vaalea`,
  "vibrant": `eloisa`,
  "white": `valkea`,
  "yellow": `keltainen`,
  "yellow green": `keltavihreä`
};

// node_modules/@react-stately/color/dist/fr-FR.mjs
var $2a2d5dc14e680587$exports = {};
$2a2d5dc14e680587$exports = {
  "alpha": `Alpha`,
  "black": `Noir`,
  "blue": `Bleu`,
  "blue purple": `Violet bleu`,
  "brightness": `Luminosité`,
  "brown": `Brun`,
  "brown yellow": `Jaune brun`,
  "colorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}`,
  "cyan": `Cyan`,
  "cyan blue": `Bleu cyan`,
  "dark": `Sombre`,
  "gray": `Gris`,
  "grayish": `Grisâtre`,
  "green": `Vert`,
  "green cyan": `Cyan vert`,
  "hue": `Teinte`,
  "light": `Clair`,
  "lightness": `Luminosité`,
  "magenta": `Magenta`,
  "magenta pink": `Rose magenta`,
  "orange": `Orange`,
  "orange yellow": `Jaune orangé`,
  "pale": `Pâle`,
  "pink": `Rose`,
  "pink red": `Rouge rosé`,
  "purple": `Violet`,
  "purple magenta": `Magenta violet`,
  "red": `Rouge`,
  "red orange": `Orange rouge`,
  "saturation": `Saturation`,
  "transparentColorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} transparent`,
  "very dark": `Très sombre`,
  "very light": `Très clair`,
  "vibrant": `Vif`,
  "white": `Blanc`,
  "yellow": `Jaune`,
  "yellow green": `Vert jaune`
};

// node_modules/@react-stately/color/dist/he-IL.mjs
var $9a3f292371bb0589$exports = {};
$9a3f292371bb0589$exports = {
  "alpha": `אלפא`,
  "black": `שחור`,
  "blue": `כחול`,
  "blue purple": `כחול סגול`,
  "brightness": `בהירות`,
  "brown": `חום`,
  "brown yellow": `חום צהוב`,
  "colorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}`,
  "cyan": `טורקיז`,
  "cyan blue": `כחול ציאן`,
  "dark": `כהה`,
  "gray": `אפור`,
  "grayish": `אפרפר`,
  "green": `ירוק`,
  "green cyan": `ציאן ירוק`,
  "hue": `גוון`,
  "light": `אור`,
  "lightness": `כמות אור`,
  "magenta": `מג'נטה`,
  "magenta pink": `ורוד מג'נטה`,
  "orange": `כתום`,
  "orange yellow": `כתום צהוב`,
  "pale": `חיוור`,
  "pink": `ורוד`,
  "pink red": `ורוד אדום`,
  "purple": `סגול`,
  "purple magenta": `מג'נטה סגול`,
  "red": `אדום`,
  "red orange": `כתום אדום`,
  "saturation": `רוויה`,
  "transparentColorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} שקוף`,
  "very dark": `כהה מאוד`,
  "very light": `בהיר מאוד`,
  "vibrant": `תוסס`,
  "white": `לבן`,
  "yellow": `צהוב`,
  "yellow green": `צהוב ירוק`
};

// node_modules/@react-stately/color/dist/hr-HR.mjs
var $4742231a685fa068$exports = {};
$4742231a685fa068$exports = {
  "alpha": `Alfa`,
  "black": `crno`,
  "blue": `Plava`,
  "blue purple": `plavo ljubičasta`,
  "brightness": `Svjetlina`,
  "brown": `smeđa`,
  "brown yellow": `smeđe žuta`,
  "colorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}`,
  "cyan": `cijan`,
  "cyan blue": `cijan plava`,
  "dark": `tamno`,
  "gray": `siva`,
  "grayish": `sivkasto`,
  "green": `Zelena`,
  "green cyan": `zelena cijan`,
  "hue": `Nijansa`,
  "light": `svjetlo`,
  "lightness": `Osvijetljenost`,
  "magenta": `magenta`,
  "magenta pink": `magentno ružičasta`,
  "orange": `narančasta`,
  "orange yellow": `narančasto žuta`,
  "pale": `blijeda`,
  "pink": `ružičasta`,
  "pink red": `ružičasto crvena`,
  "purple": `ljubičasta`,
  "purple magenta": `ljubičasta magenta`,
  "red": `Crvena`,
  "red orange": `crveno narančasta`,
  "saturation": `Zasićenost`,
  "transparentColorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} prozirnosti`,
  "very dark": `jako tamna`,
  "very light": `vrlo svijetlo`,
  "vibrant": `vibrantna`,
  "white": `bijela`,
  "yellow": `žuto`,
  "yellow green": `žuto zelena`
};

// node_modules/@react-stately/color/dist/hu-HU.mjs
var $05e247fd2960981e$exports = {};
$05e247fd2960981e$exports = {
  "alpha": `Alfa`,
  "black": `fekete`,
  "blue": `Kék`,
  "blue purple": `kék lila`,
  "brightness": `Fényesség`,
  "brown": `barna`,
  "brown yellow": `barna sárga`,
  "colorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}`,
  "cyan": `ciánkék`,
  "cyan blue": `ciánkék`,
  "dark": `sötét`,
  "gray": `szürke`,
  "grayish": `szürkés`,
  "green": `Zöld`,
  "green cyan": `zöld ciánkék`,
  "hue": `Színárnyalat`,
  "light": `világos`,
  "lightness": `Világosság`,
  "magenta": `bíbor`,
  "magenta pink": `bíbor rózsaszín`,
  "orange": `narancs`,
  "orange yellow": `narancssárga`,
  "pale": `halvány`,
  "pink": `rózsaszín`,
  "pink red": `rózsaszín piros`,
  "purple": `lila`,
  "purple magenta": `lila bíbor`,
  "red": `Piros`,
  "red orange": `piros narancs`,
  "saturation": `Telítettség`,
  "transparentColorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} átlátszó`,
  "very dark": `nagyon sötét`,
  "very light": `nagyon világos`,
  "vibrant": `élénk`,
  "white": `fehér`,
  "yellow": `sárga`,
  "yellow green": `sárga zöld`
};

// node_modules/@react-stately/color/dist/it-IT.mjs
var $a67524a79ccbe190$exports = {};
$a67524a79ccbe190$exports = {
  "alpha": `Alfa`,
  "black": `nero`,
  "blue": `Blu`,
  "blue purple": `blu viola`,
  "brightness": `Luminosità`,
  "brown": `marrone`,
  "brown yellow": `giallo bruno`,
  "colorName": (args) => `${args.hue} ${args.chroma} ${args.lightness}`,
  "cyan": `ciano`,
  "cyan blue": `blu ciano`,
  "dark": `scuro`,
  "gray": `grigio`,
  "grayish": `grigiastro`,
  "green": `Verde`,
  "green cyan": `verde ciano`,
  "hue": `Tonalità`,
  "light": `chiaro`,
  "lightness": `Luminosità`,
  "magenta": `magenta`,
  "magenta pink": `rosa magenta`,
  "orange": `arancio`,
  "orange yellow": `giallo arancio`,
  "pale": `tenue`,
  "pink": `rosa`,
  "pink red": `rosa rosso`,
  "purple": `viola`,
  "purple magenta": `viola magenta`,
  "red": `Rosso`,
  "red orange": `rosso arancio`,
  "saturation": `Saturazione`,
  "transparentColorName": (args) => `${args.hue} ${args.chroma} ${args.lightness}, trasparenza ${args.percentTransparent}`,
  "very dark": `molto scuro`,
  "very light": `molto chiaro`,
  "vibrant": `vivace`,
  "white": `bianco`,
  "yellow": `giallo`,
  "yellow green": `giallo verde`
};

// node_modules/@react-stately/color/dist/ja-JP.mjs
var $a9eefe9d6c8cb7d5$exports = {};
$a9eefe9d6c8cb7d5$exports = {
  "alpha": `アルファ`,
  "black": `ブラック`,
  "blue": `青`,
  "blue purple": `ブルーパープル`,
  "brightness": `明るさ`,
  "brown": `ブラウン`,
  "brown yellow": `ブラウンイエロー`,
  "colorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}`,
  "cyan": `シアン`,
  "cyan blue": `シアンブルー`,
  "dark": `ダーク`,
  "gray": `グレー`,
  "grayish": `グレイッシュ`,
  "green": `緑`,
  "green cyan": `グリーンシアン`,
  "hue": `色相`,
  "light": `ライト`,
  "lightness": `明度`,
  "magenta": `マゼンタ`,
  "magenta pink": `マゼンタピンク`,
  "orange": `オレンジ`,
  "orange yellow": `オレンジイエロー`,
  "pale": `ペール`,
  "pink": `ピンク`,
  "pink red": `ピンクレッド`,
  "purple": `パープル`,
  "purple magenta": `パープルマゼンタ`,
  "red": `赤`,
  "red orange": `レッドオレンジ`,
  "saturation": `彩度`,
  "transparentColorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} 透明`,
  "very dark": `最も暗い`,
  "very light": `ベリーライト`,
  "vibrant": `鮮やか`,
  "white": `ホワイト`,
  "yellow": `イエロー`,
  "yellow green": `イエローグリーン`
};

// node_modules/@react-stately/color/dist/ko-KR.mjs
var $4a6b836d4f1bfaba$exports = {};
$4a6b836d4f1bfaba$exports = {
  "alpha": `알파`,
  "black": `검은색`,
  "blue": `파랑`,
  "blue purple": `청자색`,
  "brightness": `명도`,
  "brown": `갈색`,
  "brown yellow": `황갈색`,
  "colorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}`,
  "cyan": `청록색`,
  "cyan blue": `청록색`,
  "dark": `다크`,
  "gray": `회색`,
  "grayish": `회갈색`,
  "green": `초록`,
  "green cyan": `청록색`,
  "hue": `색조`,
  "light": `라이트`,
  "lightness": `밝기`,
  "magenta": `자홍색`,
  "magenta pink": `마젠타 핑크`,
  "orange": `주황색`,
  "orange yellow": `불그스름한 노랑`,
  "pale": `흙색`,
  "pink": `분홍색`,
  "pink red": `핑크 레드`,
  "purple": `자주색`,
  "purple magenta": `보라빛 자홍색`,
  "red": `빨강`,
  "red orange": `붉은 주황색`,
  "saturation": `채도`,
  "transparentColorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} 투명도`,
  "very dark": `매우 어두운`,
  "very light": `매우 연함`,
  "vibrant": `강렬한`,
  "white": `흰색`,
  "yellow": `노란색`,
  "yellow green": `연두색`
};

// node_modules/@react-stately/color/dist/lt-LT.mjs
var $c950e4b1c482abde$exports = {};
$c950e4b1c482abde$exports = {
  "alpha": `Alfa`,
  "black": `juoda`,
  "blue": `Mėlyna`,
  "blue purple": `melsvai violetinė`,
  "brightness": `Ryškumas`,
  "brown": `ruda`,
  "brown yellow": `rusvai geltona`,
  "colorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}`,
  "cyan": `žalsvai mėlyna`,
  "cyan blue": `žalsvai mėlyna`,
  "dark": `tamsi`,
  "gray": `pilka`,
  "grayish": `pilkšva`,
  "green": `Žalia`,
  "green cyan": `žalsvai mėlyna`,
  "hue": `Atspalvis`,
  "light": `šviesi`,
  "lightness": `Šviesumas`,
  "magenta": `rausvai raudona`,
  "magenta pink": `purpurinė`,
  "orange": `oranžinė`,
  "orange yellow": `oranžinio atspalvio geltona`,
  "pale": `blyški`,
  "pink": `rožinė`,
  "pink red": `rožinė raudona`,
  "purple": `violetinė`,
  "purple magenta": `purpurinė rausvai raudona`,
  "red": `Raudona`,
  "red orange": `rausvai oranžinė`,
  "saturation": `Įsotinimas`,
  "transparentColorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} skaidri`,
  "very dark": `labai tamsi`,
  "very light": `labai šviesi`,
  "vibrant": `ryški`,
  "white": `balta`,
  "yellow": `geltona`,
  "yellow green": `gelsvai žalia`
};

// node_modules/@react-stately/color/dist/lv-LV.mjs
var $d10d6b60dc50b438$exports = {};
$d10d6b60dc50b438$exports = {
  "alpha": `Alfa`,
  "black": `melns`,
  "blue": `Zila`,
  "blue purple": `zili violets`,
  "brightness": `Spilgtums`,
  "brown": `brūns`,
  "brown yellow": `brūni dzeltens`,
  "colorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}`,
  "cyan": `ciāns`,
  "cyan blue": `ciāna zils`,
  "dark": `tumšs`,
  "gray": `pelēks`,
  "grayish": `pelēcīgs`,
  "green": `Zaļa`,
  "green cyan": `zaļš ciāns`,
  "hue": `Nokrāsa`,
  "light": `gaišs`,
  "lightness": `Gaišums`,
  "magenta": `fuksiju`,
  "magenta pink": `fuksiju rozā`,
  "orange": `oranžs`,
  "orange yellow": `oranži dzeltens`,
  "pale": `bāls`,
  "pink": `rozā`,
  "pink red": `rozīgi sarkans`,
  "purple": `violets`,
  "purple magenta": `violets fuksiju`,
  "red": `Sarkana`,
  "red orange": `sarkanīgi oranžs`,
  "saturation": `Piesātinājums`,
  "transparentColorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} caurspīdīgs`,
  "very dark": `ļoti tumšs`,
  "very light": `ļoti gaišs`,
  "vibrant": `košs`,
  "white": `balts`,
  "yellow": `dzeltens`,
  "yellow green": `dzelteni zaļš`
};

// node_modules/@react-stately/color/dist/nb-NO.mjs
var $371a732b2494f452$exports = {};
$371a732b2494f452$exports = {
  "alpha": `Alfa`,
  "black": `svart`,
  "blue": `Blå`,
  "blue purple": `blålilla`,
  "brightness": `Lysstyrke`,
  "brown": `brun`,
  "brown yellow": `brungul`,
  "colorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}`,
  "cyan": `cyan`,
  "cyan blue": `cyanblå`,
  "dark": `mørk`,
  "gray": `grå`,
  "grayish": `gråaktig`,
  "green": `Grønn`,
  "green cyan": `grønncyan`,
  "hue": `Fargetone`,
  "light": `lys`,
  "lightness": `Lyshet`,
  "magenta": `magenta`,
  "magenta pink": `magentarosa`,
  "orange": `oransje`,
  "orange yellow": `oransjegul`,
  "pale": `blek`,
  "pink": `rosa`,
  "pink red": `rosarød`,
  "purple": `lilla`,
  "purple magenta": `lillamagenta`,
  "red": `Rød`,
  "red orange": `rødoransje`,
  "saturation": `Metning`,
  "transparentColorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} gjennomsiktig`,
  "very dark": `svært mørk`,
  "very light": `svært lys`,
  "vibrant": `levende`,
  "white": `hvit`,
  "yellow": `gul`,
  "yellow green": `gulgrønn`
};

// node_modules/@react-stately/color/dist/nl-NL.mjs
var $6d042cae6243464b$exports = {};
$6d042cae6243464b$exports = {
  "alpha": `Alfa`,
  "black": `zwart`,
  "blue": `Blauw`,
  "blue purple": `paarsblauw`,
  "brightness": `Helderheid`,
  "brown": `bruin`,
  "brown yellow": `bruingeel`,
  "colorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}`,
  "cyan": `cyaan`,
  "cyan blue": `cyaanblauw`,
  "dark": `donker`,
  "gray": `grijs`,
  "grayish": `grijsachtig`,
  "green": `Groen`,
  "green cyan": `cyaangroen`,
  "hue": `Kleurtoon`,
  "light": `licht`,
  "lightness": `Lichtsterkte`,
  "magenta": `magenta`,
  "magenta pink": `magentaroze`,
  "orange": `oranje`,
  "orange yellow": `oranjegeel`,
  "pale": `bleek`,
  "pink": `roze`,
  "pink red": `rozerood`,
  "purple": `paars`,
  "purple magenta": `magentapaars`,
  "red": `Rood`,
  "red orange": `roodoranje`,
  "saturation": `Verzadiging`,
  "transparentColorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} transparant`,
  "very dark": `heel donker`,
  "very light": `heel licht`,
  "vibrant": `levendig`,
  "white": `wit`,
  "yellow": `geel`,
  "yellow green": `geelgroen`
};

// node_modules/@react-stately/color/dist/pl-PL.mjs
var $d9ab5c2611e0bcd3$exports = {};
$d9ab5c2611e0bcd3$exports = {
  "alpha": `Alfa`,
  "black": `czarny`,
  "blue": `Niebieski`,
  "blue purple": `niebiesko-fioletowy`,
  "brightness": `Jasność`,
  "brown": `brązowy`,
  "brown yellow": `brązowo-żółty`,
  "colorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}`,
  "cyan": `cyjanowy`,
  "cyan blue": `cyjanowo-niebieski`,
  "dark": `ciemny`,
  "gray": `szary`,
  "grayish": `szarawy`,
  "green": `Zielony`,
  "green cyan": `zielono-cyjanowy`,
  "hue": `Odcień`,
  "light": `jasny`,
  "lightness": `Jaskrawość`,
  "magenta": `purpurowy`,
  "magenta pink": `purpurowo-różowy`,
  "orange": `pomarańczowy`,
  "orange yellow": `pomarańczowo-żółty`,
  "pale": `blady`,
  "pink": `różowy`,
  "pink red": `różowo-czerwony`,
  "purple": `fioletowy`,
  "purple magenta": `fioletowo-purpurowy`,
  "red": `Czerwony`,
  "red orange": `czerwono-pomarańczowy`,
  "saturation": `Nasycenie`,
  "transparentColorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} przezroczystości`,
  "very dark": `bardzo ciemny`,
  "very light": `bardzo jasny`,
  "vibrant": `intensywny`,
  "white": `biały`,
  "yellow": `żółty`,
  "yellow green": `żółto-zielony`
};

// node_modules/@react-stately/color/dist/pt-BR.mjs
var $73f77c9902e29ca6$exports = {};
$73f77c9902e29ca6$exports = {
  "alpha": `Alfa`,
  "black": `preto`,
  "blue": `Azul`,
  "blue purple": `roxo azulado`,
  "brightness": `Brilho`,
  "brown": `marrom`,
  "brown yellow": `marrom amarelado`,
  "colorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}`,
  "cyan": `ciano`,
  "cyan blue": `azul-ciano`,
  "dark": `escuro`,
  "gray": `cinza`,
  "grayish": `acinzentado`,
  "green": `Verde`,
  "green cyan": `verde-ciano`,
  "hue": `Matiz`,
  "light": `claro`,
  "lightness": `Luminosidade`,
  "magenta": `magenta`,
  "magenta pink": `rosa-magenta`,
  "orange": `laranja`,
  "orange yellow": `amarelo alaranjado`,
  "pale": `pálido`,
  "pink": `rosa`,
  "pink red": `rosa avermelhado`,
  "purple": `roxo`,
  "purple magenta": `roxo-magenta`,
  "red": `Vermelho`,
  "red orange": `laranja avermelhado`,
  "saturation": `Saturação`,
  "transparentColorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} transparente`,
  "very dark": `muito escuro`,
  "very light": `muito claro`,
  "vibrant": `vibrante`,
  "white": `branco`,
  "yellow": `amarelo`,
  "yellow green": `verde amarelado`
};

// node_modules/@react-stately/color/dist/pt-PT.mjs
var $4f461eb266a95c10$exports = {};
$4f461eb266a95c10$exports = {
  "alpha": `Alfa`,
  "black": `preto`,
  "blue": `Azul`,
  "blue purple": `azul-púrpura`,
  "brightness": `Luminosidade`,
  "brown": `castanho`,
  "brown yellow": `amarelo-castanho`,
  "colorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}`,
  "cyan": `ciano`,
  "cyan blue": `azul-ciano`,
  "dark": `escuro`,
  "gray": `cinzento`,
  "grayish": `acinzentado`,
  "green": `Verde`,
  "green cyan": `verde-ciano`,
  "hue": `Tonalidade`,
  "light": `claro`,
  "lightness": `Claridade`,
  "magenta": `magenta`,
  "magenta pink": `rosa-magenta`,
  "orange": `laranja`,
  "orange yellow": `amarelo-laranja`,
  "pale": `pálido`,
  "pink": `cor-de-rosa`,
  "pink red": `vermelho-rosa`,
  "purple": `púrpura`,
  "purple magenta": `púrpura-magenta`,
  "red": `Vermelho`,
  "red orange": `laranja-vermelho`,
  "saturation": `Saturação`,
  "transparentColorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} transparente`,
  "very dark": `muito escuro`,
  "very light": `muito claro`,
  "vibrant": `vibrante`,
  "white": `branco`,
  "yellow": `amarelo`,
  "yellow green": `verde-amarelo`
};

// node_modules/@react-stately/color/dist/ro-RO.mjs
var $dc46bea2f2597899$exports = {};
$dc46bea2f2597899$exports = {
  "alpha": `Alfa`,
  "black": `negru`,
  "blue": `Albastru`,
  "blue purple": `albastru-violet`,
  "brightness": `Luminozitate`,
  "brown": `maro`,
  "brown yellow": `galben maro`,
  "colorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}`,
  "cyan": `bleu`,
  "cyan blue": `albastru-bleu`,
  "dark": `închis`,
  "gray": `gri`,
  "grayish": `cenușiu`,
  "green": `Verde`,
  "green cyan": `verde bleu`,
  "hue": `Nuanță`,
  "light": `deschis`,
  "lightness": `Luminozitate`,
  "magenta": `fucsia`,
  "magenta pink": `roz-fucsia`,
  "orange": `portocaliu`,
  "orange yellow": `galben-portocaliu`,
  "pale": `pal`,
  "pink": `roz`,
  "pink red": `roz-roșu`,
  "purple": `violet`,
  "purple magenta": `violet-fucsia`,
  "red": `Roșu`,
  "red orange": `portocaliu-roșu`,
  "saturation": `Saturație`,
  "transparentColorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} transparent`,
  "very dark": `foarte închis`,
  "very light": `foarte deschis`,
  "vibrant": `plin de viață`,
  "white": `alb`,
  "yellow": `galben`,
  "yellow green": `galben-verde`
};

// node_modules/@react-stately/color/dist/ru-RU.mjs
var $622bbd6719cc95af$exports = {};
$622bbd6719cc95af$exports = {
  "alpha": `Альфа`,
  "black": `черный`,
  "blue": `Синий`,
  "blue purple": `сине-фиолетовый`,
  "brightness": `Яркость`,
  "brown": `коричневый`,
  "brown yellow": `коричнево-желтый`,
  "colorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}`,
  "cyan": `голубой`,
  "cyan blue": `цвет морской волны`,
  "dark": `темный`,
  "gray": `серый`,
  "grayish": `сероватый`,
  "green": `Зеленый`,
  "green cyan": `сине-зеленый`,
  "hue": `Оттенок`,
  "light": `светлый`,
  "lightness": `Освещенность`,
  "magenta": `пурпурный`,
  "magenta pink": `пурпурно-розовый`,
  "orange": `оранжевый`,
  "orange yellow": `оранжево-желтый`,
  "pale": `бледный`,
  "pink": `розовый`,
  "pink red": `розово-красный`,
  "purple": `фиолетовый`,
  "purple magenta": `фиолетово-пурпурный`,
  "red": `Красный`,
  "red orange": `красно-оранжевый`,
  "saturation": `Насыщенность`,
  "transparentColorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}, прозрачный на ${args.percentTransparent}`,
  "very dark": `очень темный`,
  "very light": `очень светлый`,
  "vibrant": `яркий`,
  "white": `белый`,
  "yellow": `желтый`,
  "yellow green": `желто-зеленый`
};

// node_modules/@react-stately/color/dist/sk-SK.mjs
var $4da03c1ecd9a9c7d$exports = {};
$4da03c1ecd9a9c7d$exports = {
  "alpha": `Alfa`,
  "black": `čierna`,
  "blue": `Modrá`,
  "blue purple": `modrofialová`,
  "brightness": `Jas`,
  "brown": `hnedá`,
  "brown yellow": `hnedožltá`,
  "colorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}`,
  "cyan": `azúrová`,
  "cyan blue": `azúrová modrá`,
  "dark": `tmavá`,
  "gray": `sivá`,
  "grayish": `sivastá`,
  "green": `Zelená`,
  "green cyan": `zelená azúrová`,
  "hue": `Odtieň`,
  "light": `svetlá`,
  "lightness": `Svetlosť`,
  "magenta": `purpurová`,
  "magenta pink": `ružová purpurová`,
  "orange": `oranžová`,
  "orange yellow": `oranžovožltá`,
  "pale": `bledá`,
  "pink": `ružová`,
  "pink red": `ružovočervená`,
  "purple": `fialová`,
  "purple magenta": `fialová purpurová`,
  "red": `Červená`,
  "red orange": `červenooranžová`,
  "saturation": `Sýtosť`,
  "transparentColorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} priehľadná`,
  "very dark": `veľmi tmavá`,
  "very light": `veľmi svetlá`,
  "vibrant": `energická`,
  "white": `biela`,
  "yellow": `žltá`,
  "yellow green": `žltozelená`
};

// node_modules/@react-stately/color/dist/sl-SI.mjs
var $edb6b2fe456ed4e8$exports = {};
$edb6b2fe456ed4e8$exports = {
  "alpha": `Alfa`,
  "black": `črna`,
  "blue": `Modra`,
  "blue purple": `modro vijolična`,
  "brightness": `Svetlost`,
  "brown": `rjava`,
  "brown yellow": `rjavo rumena`,
  "colorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}`,
  "cyan": `cian`,
  "cyan blue": `cian modra`,
  "dark": `temna`,
  "gray": `siva`,
  "grayish": `sivkasta`,
  "green": `Zelena`,
  "green cyan": `zelena cian`,
  "hue": `Barva`,
  "light": `svetla`,
  "lightness": `Lahkost`,
  "magenta": `škrlatna`,
  "magenta pink": `škrlatno roza`,
  "orange": `oranžna`,
  "orange yellow": `oranžno rumena`,
  "pale": `bleda`,
  "pink": `roza`,
  "pink red": `roza rdeča`,
  "purple": `vijolična`,
  "purple magenta": `vijolično škrlatna`,
  "red": `Rdeča`,
  "red orange": `rdeče oranžna`,
  "saturation": `Nasičenost`,
  "transparentColorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} prozorna`,
  "very dark": `zelo temna`,
  "very light": `zelo svetla`,
  "vibrant": `živahna`,
  "white": `bela`,
  "yellow": `rumena`,
  "yellow green": `rumeno zelena`
};

// node_modules/@react-stately/color/dist/sr-SP.mjs
var $264cd81c52b30815$exports = {};
$264cd81c52b30815$exports = {
  "alpha": `Alfa`,
  "black": `crno`,
  "blue": `Plava`,
  "blue purple": `plavoljubičasta`,
  "brightness": `Osvetljenost`,
  "brown": `smeđa`,
  "brown yellow": `smeđežuta`,
  "colorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}`,
  "cyan": `cijan`,
  "cyan blue": `cijan plava`,
  "dark": `tamno`,
  "gray": `siva`,
  "grayish": `sivkasta`,
  "green": `Zelena`,
  "green cyan": `zeleno cijan`,
  "hue": `Nijansa`,
  "light": `svetla`,
  "lightness": `Osvetljenje`,
  "magenta": `purpurnocrvena`,
  "magenta pink": `magenta ružičasta`,
  "orange": `narandžasta`,
  "orange yellow": `narandžastožuta`,
  "pale": `bledo`,
  "pink": `ružičasta`,
  "pink red": `ružičastocrvena`,
  "purple": `ljubičasta`,
  "purple magenta": `ljubičasta magenta`,
  "red": `Crvena`,
  "red orange": `crvenonarandžasta`,
  "saturation": `Zasićenje`,
  "transparentColorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} prozirna`,
  "very dark": `veoma tamno`,
  "very light": `vrlo svetlo`,
  "vibrant": `živopisna`,
  "white": `bela`,
  "yellow": `žuto`,
  "yellow green": `žutozelena`
};

// node_modules/@react-stately/color/dist/sv-SE.mjs
var $6f80afde0270dda7$exports = {};
$6f80afde0270dda7$exports = {
  "alpha": `Alfa`,
  "black": `svart`,
  "blue": `Blått`,
  "blue purple": `blålila`,
  "brightness": `Ljusstyrka`,
  "brown": `brun`,
  "brown yellow": `brungul`,
  "colorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}`,
  "cyan": `cyan`,
  "cyan blue": `cyanblå`,
  "dark": `mörk`,
  "gray": `grå`,
  "grayish": `gråaktig`,
  "green": `Grönt`,
  "green cyan": `grön cyan`,
  "hue": `Nyans`,
  "light": `ljus`,
  "lightness": `Ljushet`,
  "magenta": `magenta`,
  "magenta pink": `magentarosa`,
  "orange": `orange`,
  "orange yellow": `orangegul`,
  "pale": `blek`,
  "pink": `rosa`,
  "pink red": `rosaröd`,
  "purple": `lila`,
  "purple magenta": `lila magenta`,
  "red": `Rött`,
  "red orange": `rödorange`,
  "saturation": `Mättnad`,
  "transparentColorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} genomskinlig`,
  "very dark": `mycket mörk`,
  "very light": `mycket ljus`,
  "vibrant": `livfull`,
  "white": `vit`,
  "yellow": `gul`,
  "yellow green": `gulgrön`
};

// node_modules/@react-stately/color/dist/tr-TR.mjs
var $23a92651c6957668$exports = {};
$23a92651c6957668$exports = {
  "alpha": `Alfa`,
  "black": `siyah`,
  "blue": `Mavi`,
  "blue purple": `mavi mor`,
  "brightness": `Parlaklık`,
  "brown": `kahverengi`,
  "brown yellow": `kahverengi sarı`,
  "colorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}`,
  "cyan": `camgöbeği`,
  "cyan blue": `camgöbeği mavi`,
  "dark": `koyu`,
  "gray": `gri`,
  "grayish": `grimsi`,
  "green": `Yeşil`,
  "green cyan": `yeşil camgöbeği`,
  "hue": `Ton`,
  "light": `açık`,
  "lightness": `Canlılık`,
  "magenta": `eflatun`,
  "magenta pink": `eflatun pembe`,
  "orange": `turuncu`,
  "orange yellow": `turuncu sarı`,
  "pale": `solgun`,
  "pink": `pembe`,
  "pink red": `pembe kırmızı`,
  "purple": `mor`,
  "purple magenta": `mor eflatun`,
  "red": `Kırmızı`,
  "red orange": `kırmızı portakal`,
  "saturation": `Doygunluk`,
  "transparentColorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} saydam`,
  "very dark": `çok koyu`,
  "very light": `çok açık`,
  "vibrant": `canlı`,
  "white": `beyaz`,
  "yellow": `sarı`,
  "yellow green": `sarı yeşil`
};

// node_modules/@react-stately/color/dist/uk-UA.mjs
var $0f9b1074d04f4954$exports = {};
$0f9b1074d04f4954$exports = {
  "alpha": `Альфа`,
  "black": `чорний`,
  "blue": `Синій`,
  "blue purple": `синьо-фіолетовий`,
  "brightness": `Яскравість`,
  "brown": `коричневий`,
  "brown yellow": `коричнево-жовтий`,
  "colorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}`,
  "cyan": `блакитний`,
  "cyan blue": `синьо-блакитний`,
  "dark": `темний`,
  "gray": `сірий`,
  "grayish": `сіруватий`,
  "green": `Зелений`,
  "green cyan": `зелено-блакитний`,
  "hue": `Тон`,
  "light": `світлий`,
  "lightness": `Освітленість`,
  "magenta": `пурпуровий`,
  "magenta pink": `пурпурово-рожевий`,
  "orange": `помаранчевий`,
  "orange yellow": `помаранчево-жовтий`,
  "pale": `блідий`,
  "pink": `рожевий`,
  "pink red": `рожево-червоний`,
  "purple": `фіолетовий`,
  "purple magenta": `фіолетово-пурпуровий`,
  "red": `Червоний`,
  "red orange": `червоно-помаранчевий`,
  "saturation": `Насиченість`,
  "transparentColorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}, прозорий на ${args.percentTransparent}`,
  "very dark": `дуже темний`,
  "very light": `дуже світлий`,
  "vibrant": `яскравий`,
  "white": `білий`,
  "yellow": `жовтий`,
  "yellow green": `жовто-зелений`
};

// node_modules/@react-stately/color/dist/zh-CN.mjs
var $a9cedf75b94e4916$exports = {};
$a9cedf75b94e4916$exports = {
  "alpha": `Alpha`,
  "black": `黑色`,
  "blue": `蓝色`,
  "blue purple": `蓝紫色`,
  "brightness": `亮度`,
  "brown": `棕色的`,
  "brown yellow": `棕黄色`,
  "colorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}`,
  "cyan": `蓝绿色`,
  "cyan blue": `青蓝色`,
  "dark": `深色`,
  "gray": `灰色`,
  "grayish": `浅灰色的`,
  "green": `绿色`,
  "green cyan": `绿青色`,
  "hue": `色相`,
  "light": `浅色`,
  "lightness": `明亮度`,
  "magenta": `紫红色`,
  "magenta pink": `紫粉色`,
  "orange": `橙色`,
  "orange yellow": `橙黄色`,
  "pale": `苍白的`,
  "pink": `粉色`,
  "pink red": `粉红色`,
  "purple": `紫色`,
  "purple magenta": `紫洋红色`,
  "red": `红色`,
  "red orange": `红橙色`,
  "saturation": `饱和度`,
  "transparentColorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} 透明`,
  "very dark": `很暗`,
  "very light": `很浅`,
  "vibrant": `生机勃勃`,
  "white": `白色`,
  "yellow": `黄色`,
  "yellow green": `黄色/绿色`
};

// node_modules/@react-stately/color/dist/zh-TW.mjs
var $37cff576474bc8d4$exports = {};
$37cff576474bc8d4$exports = {
  "alpha": `Alpha`,
  "black": `黑`,
  "blue": `藍色`,
  "blue purple": `藍紫`,
  "brightness": `亮度`,
  "brown": `棕`,
  "brown yellow": `棕黃`,
  "colorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}`,
  "cyan": `青`,
  "cyan blue": `青藍`,
  "dark": `暗`,
  "gray": `灰`,
  "grayish": `偏灰`,
  "green": `綠色`,
  "green cyan": `青綠`,
  "hue": `色相`,
  "light": `淺`,
  "lightness": `明亮`,
  "magenta": `洋紅`,
  "magenta pink": `淺洋紅`,
  "orange": `橙`,
  "orange yellow": `橙黃`,
  "pale": `淡`,
  "pink": `粉紅`,
  "pink red": `粉紅`,
  "purple": `紫`,
  "purple magenta": `紫洋紅`,
  "red": `紅色`,
  "red orange": `橙紅`,
  "saturation": `飽和度`,
  "transparentColorName": (args) => `${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} 透明`,
  "very dark": `很暗`,
  "very light": `很淺`,
  "vibrant": `鮮豔`,
  "white": `白`,
  "yellow": `黃`,
  "yellow green": `黃綠`
};

// node_modules/@react-stately/color/dist/intlStrings.mjs
var $f98dad178a72c00d$exports = {};
$f98dad178a72c00d$exports = {
  "ar-AE": $2d805fd52bb48883$exports,
  "bg-BG": $6c28468dc1df643c$exports,
  "cs-CZ": $807554f8230db0ed$exports,
  "da-DK": $7097f64386f1761c$exports,
  "de-DE": $bdd847d8beb08799$exports,
  "el-GR": $a53e00b683950971$exports,
  "en-US": $21cdd87e84f28d89$exports,
  "es-ES": $92fee9698e4d675a$exports,
  "et-EE": $7ea012e91a5ad3ee$exports,
  "fi-FI": $8460c13bb2d75345$exports,
  "fr-FR": $2a2d5dc14e680587$exports,
  "he-IL": $9a3f292371bb0589$exports,
  "hr-HR": $4742231a685fa068$exports,
  "hu-HU": $05e247fd2960981e$exports,
  "it-IT": $a67524a79ccbe190$exports,
  "ja-JP": $a9eefe9d6c8cb7d5$exports,
  "ko-KR": $4a6b836d4f1bfaba$exports,
  "lt-LT": $c950e4b1c482abde$exports,
  "lv-LV": $d10d6b60dc50b438$exports,
  "nb-NO": $371a732b2494f452$exports,
  "nl-NL": $6d042cae6243464b$exports,
  "pl-PL": $d9ab5c2611e0bcd3$exports,
  "pt-BR": $73f77c9902e29ca6$exports,
  "pt-PT": $4f461eb266a95c10$exports,
  "ro-RO": $dc46bea2f2597899$exports,
  "ru-RU": $622bbd6719cc95af$exports,
  "sk-SK": $4da03c1ecd9a9c7d$exports,
  "sl-SI": $edb6b2fe456ed4e8$exports,
  "sr-SP": $264cd81c52b30815$exports,
  "sv-SE": $6f80afde0270dda7$exports,
  "tr-TR": $23a92651c6957668$exports,
  "uk-UA": $0f9b1074d04f4954$exports,
  "zh-CN": $a9cedf75b94e4916$exports,
  "zh-TW": $37cff576474bc8d4$exports
};

// node_modules/@internationalized/string/dist/LocalizedStringDictionary.mjs
var $5b160d28a433310d$var$localeSymbol = Symbol.for("react-aria.i18n.locale");
var $5b160d28a433310d$var$stringsSymbol = Symbol.for("react-aria.i18n.strings");
var $5b160d28a433310d$var$cachedGlobalStrings = void 0;
var $5b160d28a433310d$export$c17fa47878dc55b6 = class _$5b160d28a433310d$export$c17fa47878dc55b6 {
  /** Returns a localized string for the given key and locale. */
  getStringForLocale(key, locale) {
    let strings = this.getStringsForLocale(locale);
    let string = strings[key];
    if (!string)
      throw new Error(`Could not find intl message ${key} in ${locale} locale`);
    return string;
  }
  /** Returns all localized strings for the given locale. */
  getStringsForLocale(locale) {
    let strings = this.strings[locale];
    if (!strings) {
      strings = $5b160d28a433310d$var$getStringsForLocale(locale, this.strings, this.defaultLocale);
      this.strings[locale] = strings;
    }
    return strings;
  }
  static getGlobalDictionaryForPackage(packageName) {
    if (typeof window === "undefined")
      return null;
    let locale = window[$5b160d28a433310d$var$localeSymbol];
    if ($5b160d28a433310d$var$cachedGlobalStrings === void 0) {
      let globalStrings = window[$5b160d28a433310d$var$stringsSymbol];
      if (!globalStrings)
        return null;
      $5b160d28a433310d$var$cachedGlobalStrings = {};
      for (let pkg in globalStrings)
        $5b160d28a433310d$var$cachedGlobalStrings[pkg] = new _$5b160d28a433310d$export$c17fa47878dc55b6({
          [locale]: globalStrings[pkg]
        }, locale);
    }
    let dictionary = $5b160d28a433310d$var$cachedGlobalStrings === null || $5b160d28a433310d$var$cachedGlobalStrings === void 0 ? void 0 : $5b160d28a433310d$var$cachedGlobalStrings[packageName];
    if (!dictionary)
      throw new Error(`Strings for package "${packageName}" were not included by LocalizedStringProvider. Please add it to the list passed to createLocalizedStringDictionary.`);
    return dictionary;
  }
  constructor(messages, defaultLocale = "en-US") {
    this.strings = Object.fromEntries(Object.entries(messages).filter(([, v]) => v));
    this.defaultLocale = defaultLocale;
  }
};
function $5b160d28a433310d$var$getStringsForLocale(locale, strings, defaultLocale = "en-US") {
  if (strings[locale])
    return strings[locale];
  let language = $5b160d28a433310d$var$getLanguage(locale);
  if (strings[language])
    return strings[language];
  for (let key in strings) {
    if (key.startsWith(language + "-"))
      return strings[key];
  }
  return strings[defaultLocale];
}
function $5b160d28a433310d$var$getLanguage(locale) {
  if (Intl.Locale)
    return new Intl.Locale(locale).language;
  return locale.split("-")[0];
}

// node_modules/@internationalized/string/dist/LocalizedStringFormatter.mjs
var $6db58dc88e78b024$var$pluralRulesCache = /* @__PURE__ */ new Map();
var $6db58dc88e78b024$var$numberFormatCache = /* @__PURE__ */ new Map();
var $6db58dc88e78b024$export$2f817fcdc4b89ae0 = class {
  /** Formats a localized string for the given key with the provided variables. */
  format(key, variables) {
    let message = this.strings.getStringForLocale(key, this.locale);
    return typeof message === "function" ? message(variables, this) : message;
  }
  plural(count, options, type = "cardinal") {
    let opt = options["=" + count];
    if (opt)
      return typeof opt === "function" ? opt() : opt;
    let key = this.locale + ":" + type;
    let pluralRules = $6db58dc88e78b024$var$pluralRulesCache.get(key);
    if (!pluralRules) {
      pluralRules = new Intl.PluralRules(this.locale, {
        type
      });
      $6db58dc88e78b024$var$pluralRulesCache.set(key, pluralRules);
    }
    let selected = pluralRules.select(count);
    opt = options[selected] || options.other;
    return typeof opt === "function" ? opt() : opt;
  }
  number(value) {
    let numberFormat = $6db58dc88e78b024$var$numberFormatCache.get(this.locale);
    if (!numberFormat) {
      numberFormat = new Intl.NumberFormat(this.locale);
      $6db58dc88e78b024$var$numberFormatCache.set(this.locale, numberFormat);
    }
    return numberFormat.format(value);
  }
  select(options, value) {
    let opt = options[value] || options.other;
    return typeof opt === "function" ? opt() : opt;
  }
  constructor(locale, strings) {
    this.locale = locale;
    this.strings = strings;
  }
};

// node_modules/@react-stately/color/dist/Color.mjs
function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}
var $799cddbef784668f$var$dictionary = new (0, $5b160d28a433310d$export$c17fa47878dc55b6)((0, $parcel$interopDefault($f98dad178a72c00d$exports)));
function $799cddbef784668f$export$6e865ea70d7724f(value) {
  let res = $799cddbef784668f$var$RGBColor.parse(value) || $799cddbef784668f$var$HSBColor.parse(value) || $799cddbef784668f$var$HSLColor.parse(value);
  if (res)
    return res;
  throw new Error("Invalid color value: " + value);
}
function $799cddbef784668f$export$4cde5df63f53f473(v) {
  if (typeof v === "string")
    return $799cddbef784668f$export$6e865ea70d7724f(v);
  else
    return v;
}
function $799cddbef784668f$export$1c0c08912582810c(colorSpace) {
  switch (colorSpace) {
    case "rgb":
      return $799cddbef784668f$var$RGBColor.colorChannels;
    case "hsl":
      return $799cddbef784668f$var$HSLColor.colorChannels;
    case "hsb":
      return $799cddbef784668f$var$HSBColor.colorChannels;
  }
}
var $799cddbef784668f$var$ORANGE_LIGHTNESS_THRESHOLD = 0.68;
var $799cddbef784668f$var$YELLOW_GREEN_LIGHTNESS_THRESHOLD = 0.85;
var $799cddbef784668f$var$MAX_DARK_LIGHTNESS = 0.55;
var $799cddbef784668f$var$GRAY_THRESHOLD = 1e-3;
var $799cddbef784668f$var$OKLCH_HUES = [
  [
    0,
    "pink"
  ],
  [
    15,
    "red"
  ],
  [
    48,
    "orange"
  ],
  [
    94,
    "yellow"
  ],
  [
    135,
    "green"
  ],
  [
    175,
    "cyan"
  ],
  [
    264,
    "blue"
  ],
  [
    284,
    "purple"
  ],
  [
    320,
    "magenta"
  ],
  [
    349,
    "pink"
  ]
];
var $799cddbef784668f$var$Color = class {
  toHexInt() {
    return this.toFormat("rgb").toHexInt();
  }
  getChannelValue(channel) {
    if (channel in this)
      return this[channel];
    throw new Error("Unsupported color channel: " + channel);
  }
  withChannelValue(channel, value) {
    if (channel in this) {
      let x = this.clone();
      x[channel] = value;
      return x;
    }
    throw new Error("Unsupported color channel: " + channel);
  }
  getChannelName(channel, locale) {
    let strings = (0, $5b160d28a433310d$export$c17fa47878dc55b6).getGlobalDictionaryForPackage("@react-stately/color") || $799cddbef784668f$var$dictionary;
    return strings.getStringForLocale(channel, locale);
  }
  getColorSpaceAxes(xyChannels) {
    let { xChannel, yChannel } = xyChannels;
    let xCh = xChannel || this.getColorChannels().find((c) => c !== yChannel);
    let yCh = yChannel || this.getColorChannels().find((c) => c !== xCh);
    let zCh = this.getColorChannels().find((c) => c !== xCh && c !== yCh);
    return {
      xChannel: xCh,
      yChannel: yCh,
      zChannel: zCh
    };
  }
  getColorName(locale) {
    let [l, c, h] = $799cddbef784668f$var$toOKLCH(this);
    let strings = (0, $5b160d28a433310d$export$c17fa47878dc55b6).getGlobalDictionaryForPackage("@react-stately/color") || $799cddbef784668f$var$dictionary;
    if (l > 0.999)
      return strings.getStringForLocale("white", locale);
    if (l < 1e-3)
      return strings.getStringForLocale("black", locale);
    let hue;
    [hue, l] = this.getOklchHue(l, c, h, locale);
    let lightness = "";
    let chroma = "";
    if (c <= 0.1 && c >= $799cddbef784668f$var$GRAY_THRESHOLD) {
      if (l >= 0.7)
        chroma = "pale";
      else
        chroma = "grayish";
    } else if (c >= 0.15)
      chroma = "vibrant";
    if (l < 0.3)
      lightness = "very dark";
    else if (l < $799cddbef784668f$var$MAX_DARK_LIGHTNESS)
      lightness = "dark";
    else if (l < 0.7)
      ;
    else if (l < 0.85)
      lightness = "light";
    else
      lightness = "very light";
    if (chroma)
      chroma = strings.getStringForLocale(chroma, locale);
    if (lightness)
      lightness = strings.getStringForLocale(lightness, locale);
    let alpha = this.getChannelValue("alpha");
    let formatter = new (0, $6db58dc88e78b024$export$2f817fcdc4b89ae0)(locale, strings);
    if (alpha < 1) {
      let percentTransparent = new (0, $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5)(locale, {
        style: "percent"
      }).format(1 - alpha);
      return formatter.format("transparentColorName", {
        lightness,
        chroma,
        hue,
        percentTransparent
      }).replace(/\s+/g, " ").trim();
    } else
      return formatter.format("colorName", {
        lightness,
        chroma,
        hue
      }).replace(/\s+/g, " ").trim();
  }
  getOklchHue(l, c, h, locale) {
    let strings = (0, $5b160d28a433310d$export$c17fa47878dc55b6).getGlobalDictionaryForPackage("@react-stately/color") || $799cddbef784668f$var$dictionary;
    if (c < $799cddbef784668f$var$GRAY_THRESHOLD)
      return [
        strings.getStringForLocale("gray", locale),
        l
      ];
    for (let i = 0; i < $799cddbef784668f$var$OKLCH_HUES.length; i++) {
      let [hue, hueName] = $799cddbef784668f$var$OKLCH_HUES[i];
      let [nextHue, nextHueName] = $799cddbef784668f$var$OKLCH_HUES[i + 1] || [
        360,
        "pink"
      ];
      if (h >= hue && h < nextHue) {
        if (hueName === "orange") {
          if (l < $799cddbef784668f$var$ORANGE_LIGHTNESS_THRESHOLD)
            hueName = "brown";
          else
            l = l - $799cddbef784668f$var$ORANGE_LIGHTNESS_THRESHOLD + $799cddbef784668f$var$MAX_DARK_LIGHTNESS;
        }
        if (h > hue + (nextHue - hue) / 2 && hueName !== nextHueName)
          hueName = `${hueName} ${nextHueName}`;
        else if (hueName === "yellow" && l < $799cddbef784668f$var$YELLOW_GREEN_LIGHTNESS_THRESHOLD)
          hueName = "yellow green";
        let name = strings.getStringForLocale(hueName, locale).toLocaleLowerCase(locale);
        return [
          name,
          l
        ];
      }
    }
    throw new Error("Unexpected hue");
  }
  getHueName(locale) {
    let [l, c, h] = $799cddbef784668f$var$toOKLCH(this);
    let [name] = this.getOklchHue(l, c, h, locale);
    return name;
  }
};
var $799cddbef784668f$var$RGBColor = class _$799cddbef784668f$var$RGBColor extends $799cddbef784668f$var$Color {
  static parse(value) {
    let colors = [];
    if (/^#[\da-f]+$/i.test(value) && [
      4,
      5,
      7,
      9
    ].includes(value.length)) {
      const values = (value.length < 6 ? value.replace(/[^#]/gi, "$&$&") : value).slice(1).split("");
      while (values.length > 0)
        colors.push(parseInt(values.splice(0, 2).join(""), 16));
      colors[3] = colors[3] !== void 0 ? colors[3] / 255 : void 0;
    }
    const match = value.match(/^rgba?\((.*)\)$/);
    if (match === null || match === void 0 ? void 0 : match[1]) {
      colors = match[1].split(",").map((value2) => Number(value2.trim()));
      colors = colors.map((num, i) => (0, $9446cca9a3875146$export$7d15b64cf5a3a4c4)(num, 0, i < 3 ? 255 : 1));
    }
    var _colors_;
    return colors.length < 3 ? void 0 : new _$799cddbef784668f$var$RGBColor(colors[0], colors[1], colors[2], (_colors_ = colors[3]) !== null && _colors_ !== void 0 ? _colors_ : 1);
  }
  toString(format = "css") {
    switch (format) {
      case "hex":
        return "#" + (this.red.toString(16).padStart(2, "0") + this.green.toString(16).padStart(2, "0") + this.blue.toString(16).padStart(2, "0")).toUpperCase();
      case "hexa":
        return "#" + (this.red.toString(16).padStart(2, "0") + this.green.toString(16).padStart(2, "0") + this.blue.toString(16).padStart(2, "0") + Math.round(this.alpha * 255).toString(16).padStart(2, "0")).toUpperCase();
      case "rgb":
        return `rgb(${this.red}, ${this.green}, ${this.blue})`;
      case "css":
      case "rgba":
        return `rgba(${this.red}, ${this.green}, ${this.blue}, ${this.alpha})`;
      default:
        return this.toFormat(format).toString(format);
    }
  }
  toFormat(format) {
    switch (format) {
      case "hex":
      case "hexa":
      case "rgb":
      case "rgba":
        return this;
      case "hsb":
      case "hsba":
        return this.toHSB();
      case "hsl":
      case "hsla":
        return this.toHSL();
      default:
        throw new Error("Unsupported color conversion: rgb -> " + format);
    }
  }
  toHexInt() {
    return this.red << 16 | this.green << 8 | this.blue;
  }
  /**
  * Converts an RGB color value to HSB.
  * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#From_RGB.
  * @returns An HSBColor object.
  */
  toHSB() {
    const red = this.red / 255;
    const green = this.green / 255;
    const blue = this.blue / 255;
    const min = Math.min(red, green, blue);
    const brightness = Math.max(red, green, blue);
    const chroma = brightness - min;
    const saturation = brightness === 0 ? 0 : chroma / brightness;
    let hue = 0;
    if (chroma !== 0) {
      switch (brightness) {
        case red:
          hue = (green - blue) / chroma + (green < blue ? 6 : 0);
          break;
        case green:
          hue = (blue - red) / chroma + 2;
          break;
        case blue:
          hue = (red - green) / chroma + 4;
          break;
      }
      hue /= 6;
    }
    return new $799cddbef784668f$var$HSBColor((0, $9446cca9a3875146$export$b6268554fba451f)(hue * 360, 2), (0, $9446cca9a3875146$export$b6268554fba451f)(saturation * 100, 2), (0, $9446cca9a3875146$export$b6268554fba451f)(brightness * 100, 2), this.alpha);
  }
  /**
  * Converts an RGB color value to HSL.
  * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#From_RGB.
  * @returns An HSLColor object.
  */
  toHSL() {
    const red = this.red / 255;
    const green = this.green / 255;
    const blue = this.blue / 255;
    const min = Math.min(red, green, blue);
    const max = Math.max(red, green, blue);
    const lightness = (max + min) / 2;
    const chroma = max - min;
    let hue;
    let saturation;
    if (chroma === 0)
      hue = saturation = 0;
    else {
      saturation = chroma / (lightness < 0.5 ? max + min : 2 - max - min);
      switch (max) {
        case red:
          hue = (green - blue) / chroma + (green < blue ? 6 : 0);
          break;
        case green:
          hue = (blue - red) / chroma + 2;
          break;
        case blue:
          hue = (red - green) / chroma + 4;
          break;
      }
      hue /= 6;
    }
    return new $799cddbef784668f$var$HSLColor((0, $9446cca9a3875146$export$b6268554fba451f)(hue * 360, 2), (0, $9446cca9a3875146$export$b6268554fba451f)(saturation * 100, 2), (0, $9446cca9a3875146$export$b6268554fba451f)(lightness * 100, 2), this.alpha);
  }
  clone() {
    return new _$799cddbef784668f$var$RGBColor(this.red, this.green, this.blue, this.alpha);
  }
  getChannelRange(channel) {
    switch (channel) {
      case "red":
      case "green":
      case "blue":
        return {
          minValue: 0,
          maxValue: 255,
          step: 1,
          pageSize: 17
        };
      case "alpha":
        return {
          minValue: 0,
          maxValue: 1,
          step: 0.01,
          pageSize: 0.1
        };
      default:
        throw new Error("Unknown color channel: " + channel);
    }
  }
  getChannelFormatOptions(channel) {
    switch (channel) {
      case "red":
      case "green":
      case "blue":
        return {
          style: "decimal"
        };
      case "alpha":
        return {
          style: "percent"
        };
      default:
        throw new Error("Unknown color channel: " + channel);
    }
  }
  formatChannelValue(channel, locale) {
    let options = this.getChannelFormatOptions(channel);
    let value = this.getChannelValue(channel);
    return new (0, $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5)(locale, options).format(value);
  }
  getColorSpace() {
    return "rgb";
  }
  getColorChannels() {
    return _$799cddbef784668f$var$RGBColor.colorChannels;
  }
  constructor(red, green, blue, alpha) {
    super();
    this.red = red;
    this.green = green;
    this.blue = blue;
    this.alpha = alpha;
  }
};
$799cddbef784668f$var$RGBColor.colorChannels = [
  "red",
  "green",
  "blue"
];
var $799cddbef784668f$var$HSB_REGEX = /hsb\(([-+]?\d+(?:.\d+)?\s*,\s*[-+]?\d+(?:.\d+)?%\s*,\s*[-+]?\d+(?:.\d+)?%)\)|hsba\(([-+]?\d+(?:.\d+)?\s*,\s*[-+]?\d+(?:.\d+)?%\s*,\s*[-+]?\d+(?:.\d+)?%\s*,\s*[-+]?\d(.\d+)?)\)/;
var $799cddbef784668f$var$HSBColor = class _$799cddbef784668f$var$HSBColor extends $799cddbef784668f$var$Color {
  static parse(value) {
    let m;
    if (m = value.match($799cddbef784668f$var$HSB_REGEX)) {
      var _m_;
      const [h, s, b, a] = ((_m_ = m[1]) !== null && _m_ !== void 0 ? _m_ : m[2]).split(",").map((n) => Number(n.trim().replace("%", "")));
      return new _$799cddbef784668f$var$HSBColor($799cddbef784668f$var$mod(h, 360), (0, $9446cca9a3875146$export$7d15b64cf5a3a4c4)(s, 0, 100), (0, $9446cca9a3875146$export$7d15b64cf5a3a4c4)(b, 0, 100), (0, $9446cca9a3875146$export$7d15b64cf5a3a4c4)(a !== null && a !== void 0 ? a : 1, 0, 1));
    }
  }
  toString(format = "css") {
    switch (format) {
      case "css":
        return this.toHSL().toString("css");
      case "hex":
        return this.toRGB().toString("hex");
      case "hexa":
        return this.toRGB().toString("hexa");
      case "hsb":
        return `hsb(${this.hue}, ${(0, $9446cca9a3875146$export$b6268554fba451f)(this.saturation, 2)}%, ${(0, $9446cca9a3875146$export$b6268554fba451f)(this.brightness, 2)}%)`;
      case "hsba":
        return `hsba(${this.hue}, ${(0, $9446cca9a3875146$export$b6268554fba451f)(this.saturation, 2)}%, ${(0, $9446cca9a3875146$export$b6268554fba451f)(this.brightness, 2)}%, ${this.alpha})`;
      default:
        return this.toFormat(format).toString(format);
    }
  }
  toFormat(format) {
    switch (format) {
      case "hsb":
      case "hsba":
        return this;
      case "hsl":
      case "hsla":
        return this.toHSL();
      case "rgb":
      case "rgba":
        return this.toRGB();
      default:
        throw new Error("Unsupported color conversion: hsb -> " + format);
    }
  }
  /**
  * Converts a HSB color to HSL.
  * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSV_to_HSL.
  * @returns An HSLColor object.
  */
  toHSL() {
    let saturation = this.saturation / 100;
    let brightness = this.brightness / 100;
    let lightness = brightness * (1 - saturation / 2);
    saturation = lightness === 0 || lightness === 1 ? 0 : (brightness - lightness) / Math.min(lightness, 1 - lightness);
    return new $799cddbef784668f$var$HSLColor((0, $9446cca9a3875146$export$b6268554fba451f)(this.hue, 2), (0, $9446cca9a3875146$export$b6268554fba451f)(saturation * 100, 2), (0, $9446cca9a3875146$export$b6268554fba451f)(lightness * 100, 2), this.alpha);
  }
  /**
  * Converts a HSV color value to RGB.
  * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSV_to_RGB_alternative.
  * @returns An RGBColor object.
  */
  toRGB() {
    let hue = this.hue;
    let saturation = this.saturation / 100;
    let brightness = this.brightness / 100;
    let fn = (n, k = (n + hue / 60) % 6) => brightness - saturation * brightness * Math.max(Math.min(k, 4 - k, 1), 0);
    return new $799cddbef784668f$var$RGBColor(Math.round(fn(5) * 255), Math.round(fn(3) * 255), Math.round(fn(1) * 255), this.alpha);
  }
  clone() {
    return new _$799cddbef784668f$var$HSBColor(this.hue, this.saturation, this.brightness, this.alpha);
  }
  getChannelRange(channel) {
    switch (channel) {
      case "hue":
        return {
          minValue: 0,
          maxValue: 360,
          step: 1,
          pageSize: 15
        };
      case "saturation":
      case "brightness":
        return {
          minValue: 0,
          maxValue: 100,
          step: 1,
          pageSize: 10
        };
      case "alpha":
        return {
          minValue: 0,
          maxValue: 1,
          step: 0.01,
          pageSize: 0.1
        };
      default:
        throw new Error("Unknown color channel: " + channel);
    }
  }
  getChannelFormatOptions(channel) {
    switch (channel) {
      case "hue":
        return {
          style: "unit",
          unit: "degree",
          unitDisplay: "narrow"
        };
      case "saturation":
      case "brightness":
      case "alpha":
        return {
          style: "percent"
        };
      default:
        throw new Error("Unknown color channel: " + channel);
    }
  }
  formatChannelValue(channel, locale) {
    let options = this.getChannelFormatOptions(channel);
    let value = this.getChannelValue(channel);
    if (channel === "saturation" || channel === "brightness")
      value /= 100;
    return new (0, $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5)(locale, options).format(value);
  }
  getColorSpace() {
    return "hsb";
  }
  getColorChannels() {
    return _$799cddbef784668f$var$HSBColor.colorChannels;
  }
  constructor(hue, saturation, brightness, alpha) {
    super();
    this.hue = hue;
    this.saturation = saturation;
    this.brightness = brightness;
    this.alpha = alpha;
  }
};
$799cddbef784668f$var$HSBColor.colorChannels = [
  "hue",
  "saturation",
  "brightness"
];
var $799cddbef784668f$var$HSL_REGEX = /hsl\(([-+]?\d+(?:.\d+)?\s*,\s*[-+]?\d+(?:.\d+)?%\s*,\s*[-+]?\d+(?:.\d+)?%)\)|hsla\(([-+]?\d+(?:.\d+)?\s*,\s*[-+]?\d+(?:.\d+)?%\s*,\s*[-+]?\d+(?:.\d+)?%\s*,\s*[-+]?\d(.\d+)?)\)/;
function $799cddbef784668f$var$mod(n, m) {
  return (n % m + m) % m;
}
var $799cddbef784668f$var$HSLColor = class _$799cddbef784668f$var$HSLColor extends $799cddbef784668f$var$Color {
  static parse(value) {
    let m;
    if (m = value.match($799cddbef784668f$var$HSL_REGEX)) {
      var _m_;
      const [h, s, l, a] = ((_m_ = m[1]) !== null && _m_ !== void 0 ? _m_ : m[2]).split(",").map((n) => Number(n.trim().replace("%", "")));
      return new _$799cddbef784668f$var$HSLColor($799cddbef784668f$var$mod(h, 360), (0, $9446cca9a3875146$export$7d15b64cf5a3a4c4)(s, 0, 100), (0, $9446cca9a3875146$export$7d15b64cf5a3a4c4)(l, 0, 100), (0, $9446cca9a3875146$export$7d15b64cf5a3a4c4)(a !== null && a !== void 0 ? a : 1, 0, 1));
    }
  }
  toString(format = "css") {
    switch (format) {
      case "hex":
        return this.toRGB().toString("hex");
      case "hexa":
        return this.toRGB().toString("hexa");
      case "hsl":
        return `hsl(${this.hue}, ${(0, $9446cca9a3875146$export$b6268554fba451f)(this.saturation, 2)}%, ${(0, $9446cca9a3875146$export$b6268554fba451f)(this.lightness, 2)}%)`;
      case "css":
      case "hsla":
        return `hsla(${this.hue}, ${(0, $9446cca9a3875146$export$b6268554fba451f)(this.saturation, 2)}%, ${(0, $9446cca9a3875146$export$b6268554fba451f)(this.lightness, 2)}%, ${this.alpha})`;
      default:
        return this.toFormat(format).toString(format);
    }
  }
  toFormat(format) {
    switch (format) {
      case "hsl":
      case "hsla":
        return this;
      case "hsb":
      case "hsba":
        return this.toHSB();
      case "rgb":
      case "rgba":
        return this.toRGB();
      default:
        throw new Error("Unsupported color conversion: hsl -> " + format);
    }
  }
  /**
  * Converts a HSL color to HSB.
  * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSL_to_HSV.
  * @returns An HSBColor object.
  */
  toHSB() {
    let saturation = this.saturation / 100;
    let lightness = this.lightness / 100;
    let brightness = lightness + saturation * Math.min(lightness, 1 - lightness);
    saturation = brightness === 0 ? 0 : 2 * (1 - lightness / brightness);
    return new $799cddbef784668f$var$HSBColor((0, $9446cca9a3875146$export$b6268554fba451f)(this.hue, 2), (0, $9446cca9a3875146$export$b6268554fba451f)(saturation * 100, 2), (0, $9446cca9a3875146$export$b6268554fba451f)(brightness * 100, 2), this.alpha);
  }
  /**
  * Converts a HSL color to RGB.
  * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSL_to_RGB_alternative.
  * @returns An RGBColor object.
  */
  toRGB() {
    let hue = this.hue;
    let saturation = this.saturation / 100;
    let lightness = this.lightness / 100;
    let a = saturation * Math.min(lightness, 1 - lightness);
    let fn = (n, k = (n + hue / 30) % 12) => lightness - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
    return new $799cddbef784668f$var$RGBColor(Math.round(fn(0) * 255), Math.round(fn(8) * 255), Math.round(fn(4) * 255), this.alpha);
  }
  clone() {
    return new _$799cddbef784668f$var$HSLColor(this.hue, this.saturation, this.lightness, this.alpha);
  }
  getChannelRange(channel) {
    switch (channel) {
      case "hue":
        return {
          minValue: 0,
          maxValue: 360,
          step: 1,
          pageSize: 15
        };
      case "saturation":
      case "lightness":
        return {
          minValue: 0,
          maxValue: 100,
          step: 1,
          pageSize: 10
        };
      case "alpha":
        return {
          minValue: 0,
          maxValue: 1,
          step: 0.01,
          pageSize: 0.1
        };
      default:
        throw new Error("Unknown color channel: " + channel);
    }
  }
  getChannelFormatOptions(channel) {
    switch (channel) {
      case "hue":
        return {
          style: "unit",
          unit: "degree",
          unitDisplay: "narrow"
        };
      case "saturation":
      case "lightness":
      case "alpha":
        return {
          style: "percent"
        };
      default:
        throw new Error("Unknown color channel: " + channel);
    }
  }
  formatChannelValue(channel, locale) {
    let options = this.getChannelFormatOptions(channel);
    let value = this.getChannelValue(channel);
    if (channel === "saturation" || channel === "lightness")
      value /= 100;
    return new (0, $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5)(locale, options).format(value);
  }
  getColorSpace() {
    return "hsl";
  }
  getColorChannels() {
    return _$799cddbef784668f$var$HSLColor.colorChannels;
  }
  constructor(hue, saturation, lightness, alpha) {
    super();
    this.hue = hue;
    this.saturation = saturation;
    this.lightness = lightness;
    this.alpha = alpha;
  }
};
$799cddbef784668f$var$HSLColor.colorChannels = [
  "hue",
  "saturation",
  "lightness"
];
function $799cddbef784668f$var$toOKLCH(color) {
  let rgb = color.toFormat("rgb");
  let red = rgb.getChannelValue("red") / 255;
  let green = rgb.getChannelValue("green") / 255;
  let blue = rgb.getChannelValue("blue") / 255;
  [red, green, blue] = $799cddbef784668f$var$lin_sRGB(red, green, blue);
  let [x, y, z] = $799cddbef784668f$var$lin_sRGB_to_XYZ(red, green, blue);
  let [l, a, b] = $799cddbef784668f$var$XYZ_to_OKLab(x, y, z);
  return $799cddbef784668f$var$OKLab_to_OKLCH(l, a, b);
}
function $799cddbef784668f$var$OKLab_to_OKLCH(l, a, b) {
  var hue = Math.atan2(b, a) * 180 / Math.PI;
  return [
    l,
    Math.sqrt(a ** 2 + b ** 2),
    hue >= 0 ? hue : hue + 360
    // Hue, in degrees [0 to 360)
  ];
}
function $799cddbef784668f$var$lin_sRGB(r, g, b) {
  return [
    $799cddbef784668f$var$lin_sRGB_component(r),
    $799cddbef784668f$var$lin_sRGB_component(g),
    $799cddbef784668f$var$lin_sRGB_component(b)
  ];
}
function $799cddbef784668f$var$lin_sRGB_component(val) {
  let sign = val < 0 ? -1 : 1;
  let abs = Math.abs(val);
  if (abs <= 0.04045)
    return val / 12.92;
  return sign * Math.pow((abs + 0.055) / 1.055, 2.4);
}
function $799cddbef784668f$var$lin_sRGB_to_XYZ(r, g, b) {
  const M = [
    506752 / 1228815,
    87881 / 245763,
    12673 / 70218,
    87098 / 409605,
    175762 / 245763,
    12673 / 175545,
    7918 / 409605,
    87881 / 737289,
    1001167 / 1053270
  ];
  return $799cddbef784668f$var$multiplyMatrix(M, r, g, b);
}
function $799cddbef784668f$var$XYZ_to_OKLab(x, y, z) {
  const XYZtoLMS = [
    0.819022437996703,
    0.3619062600528904,
    -0.1288737815209879,
    0.0329836539323885,
    0.9292868615863434,
    0.0361446663506424,
    0.0481771893596242,
    0.2642395317527308,
    0.6335478284694309
  ];
  const LMStoOKLab = [
    0.210454268309314,
    0.7936177747023054,
    -0.0040720430116193,
    1.9779985324311684,
    -2.42859224204858,
    0.450593709617411,
    0.0259040424655478,
    0.7827717124575296,
    -0.8086757549230774
  ];
  let [a, b, c] = $799cddbef784668f$var$multiplyMatrix(XYZtoLMS, x, y, z);
  return $799cddbef784668f$var$multiplyMatrix(LMStoOKLab, Math.cbrt(a), Math.cbrt(b), Math.cbrt(c));
}
function $799cddbef784668f$var$multiplyMatrix(m, x, y, z) {
  let a = m[0] * x + m[1] * y + m[2] * z;
  let b = m[3] * x + m[4] * y + m[5] * z;
  let c = m[6] * x + m[7] * y + m[8] * z;
  return [
    a,
    b,
    c
  ];
}

// node_modules/@react-stately/color/dist/useColorAreaState.mjs
var import_react = __toESM(require_react(), 1);
var $6e14a98a7f67141d$var$DEFAULT_COLOR = (0, $799cddbef784668f$export$6e865ea70d7724f)("#ffffff");
function $6e14a98a7f67141d$export$6df7f0e2cabc7eef(props) {
  let { value, defaultValue, colorSpace, xChannel, yChannel, onChange, onChangeEnd } = props;
  if (!value && !defaultValue)
    defaultValue = $6e14a98a7f67141d$var$DEFAULT_COLOR;
  let [colorValue, setColorState] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(value && (0, $799cddbef784668f$export$4cde5df63f53f473)(value), defaultValue && (0, $799cddbef784668f$export$4cde5df63f53f473)(defaultValue), onChange);
  let color = (0, import_react.useMemo)(() => colorSpace && colorValue ? colorValue.toFormat(colorSpace) : colorValue, [
    colorValue,
    colorSpace
  ]);
  let valueRef = (0, import_react.useRef)(color);
  let setColor = (color2) => {
    valueRef.current = color2;
    setColorState(color2);
  };
  let channels = (0, import_react.useMemo)(() => color.getColorSpaceAxes({
    xChannel,
    yChannel
  }), [
    color,
    xChannel,
    yChannel
  ]);
  let xChannelRange = color.getChannelRange(channels.xChannel);
  let yChannelRange = color.getChannelRange(channels.yChannel);
  let { minValue: minValueX, maxValue: maxValueX, step: stepX, pageSize: pageSizeX } = xChannelRange;
  let { minValue: minValueY, maxValue: maxValueY, step: stepY, pageSize: pageSizeY } = yChannelRange;
  let [isDragging, setDragging] = (0, import_react.useState)(false);
  let isDraggingRef = (0, import_react.useRef)(false);
  let xValue = color.getChannelValue(channels.xChannel);
  let yValue = color.getChannelValue(channels.yChannel);
  let setXValue = (v) => {
    if (v === xValue)
      return;
    let newColor = color.withChannelValue(channels.xChannel, v);
    setColor(newColor);
  };
  let setYValue = (v) => {
    if (v === yValue)
      return;
    let newColor = color.withChannelValue(channels.yChannel, v);
    setColor(newColor);
  };
  return {
    channels,
    xChannelStep: stepX,
    yChannelStep: stepY,
    xChannelPageStep: pageSizeX,
    yChannelPageStep: pageSizeY,
    value: color,
    setValue(value2) {
      setColor((0, $799cddbef784668f$export$4cde5df63f53f473)(value2));
    },
    xValue,
    setXValue,
    yValue,
    setYValue,
    setColorFromPoint(x, y) {
      let newXValue = minValueX + (0, $9446cca9a3875146$export$7d15b64cf5a3a4c4)(x, 0, 1) * (maxValueX - minValueX);
      let newYValue = minValueY + (1 - (0, $9446cca9a3875146$export$7d15b64cf5a3a4c4)(y, 0, 1)) * (maxValueY - minValueY);
      let newColor;
      if (newXValue !== xValue) {
        newXValue = (0, $9446cca9a3875146$export$cb6e0bb50bc19463)(newXValue, minValueX, maxValueX, stepX);
        newColor = color.withChannelValue(channels.xChannel, newXValue);
      }
      if (newYValue !== yValue) {
        newYValue = (0, $9446cca9a3875146$export$cb6e0bb50bc19463)(newYValue, minValueY, maxValueY, stepY);
        newColor = (newColor || color).withChannelValue(channels.yChannel, newYValue);
      }
      if (newColor)
        setColor(newColor);
    },
    getThumbPosition() {
      let x = (xValue - minValueX) / (maxValueX - minValueX);
      let y = 1 - (yValue - minValueY) / (maxValueY - minValueY);
      return {
        x,
        y
      };
    },
    incrementX(stepSize) {
      setXValue(xValue + stepSize > maxValueX ? maxValueX : (0, $9446cca9a3875146$export$cb6e0bb50bc19463)(xValue + stepSize, minValueX, maxValueX, stepX));
    },
    incrementY(stepSize) {
      setYValue(yValue + stepSize > maxValueY ? maxValueY : (0, $9446cca9a3875146$export$cb6e0bb50bc19463)(yValue + stepSize, minValueY, maxValueY, stepY));
    },
    decrementX(stepSize) {
      setXValue((0, $9446cca9a3875146$export$cb6e0bb50bc19463)(xValue - stepSize, minValueX, maxValueX, stepX));
    },
    decrementY(stepSize) {
      setYValue((0, $9446cca9a3875146$export$cb6e0bb50bc19463)(yValue - stepSize, minValueY, maxValueY, stepY));
    },
    setDragging(isDragging2) {
      let wasDragging = isDraggingRef.current;
      isDraggingRef.current = isDragging2;
      if (onChangeEnd && !isDragging2 && wasDragging)
        onChangeEnd(valueRef.current);
      setDragging(isDragging2);
    },
    isDragging,
    getDisplayColor() {
      return color.withChannelValue("alpha", 1);
    }
  };
}

// node_modules/@react-stately/slider/dist/useSliderState.mjs
var import_react2 = __toESM(require_react(), 1);
var $28f99e3e86e6ec45$var$DEFAULT_MIN_VALUE = 0;
var $28f99e3e86e6ec45$var$DEFAULT_MAX_VALUE = 100;
var $28f99e3e86e6ec45$var$DEFAULT_STEP_VALUE = 1;
function $28f99e3e86e6ec45$export$e5fda3247f5d67f9(props) {
  const { isDisabled = false, minValue = $28f99e3e86e6ec45$var$DEFAULT_MIN_VALUE, maxValue = $28f99e3e86e6ec45$var$DEFAULT_MAX_VALUE, numberFormatter: formatter, step = $28f99e3e86e6ec45$var$DEFAULT_STEP_VALUE, orientation = "horizontal" } = props;
  let pageSize = (0, import_react2.useMemo)(() => {
    let calcPageSize = (maxValue - minValue) / 10;
    calcPageSize = (0, $9446cca9a3875146$export$cb6e0bb50bc19463)(calcPageSize, 0, calcPageSize + step, step);
    return Math.max(calcPageSize, step);
  }, [
    step,
    maxValue,
    minValue
  ]);
  let restrictValues = (0, import_react2.useCallback)((values2) => values2 === null || values2 === void 0 ? void 0 : values2.map((val, idx) => {
    let min = idx === 0 ? minValue : val[idx - 1];
    let max = idx === values2.length - 1 ? maxValue : val[idx + 1];
    return (0, $9446cca9a3875146$export$cb6e0bb50bc19463)(val, min, max, step);
  }), [
    minValue,
    maxValue,
    step
  ]);
  let value = (0, import_react2.useMemo)(() => restrictValues($28f99e3e86e6ec45$var$convertValue(props.value)), [
    props.value
  ]);
  let defaultValue = (0, import_react2.useMemo)(() => {
    var _convertValue;
    return restrictValues((_convertValue = $28f99e3e86e6ec45$var$convertValue(props.defaultValue)) !== null && _convertValue !== void 0 ? _convertValue : [
      minValue
    ]);
  }, [
    props.defaultValue,
    minValue
  ]);
  let onChange = $28f99e3e86e6ec45$var$createOnChange(props.value, props.defaultValue, props.onChange);
  let onChangeEnd = $28f99e3e86e6ec45$var$createOnChange(props.value, props.defaultValue, props.onChangeEnd);
  const [values, setValuesState] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(value, defaultValue, onChange);
  const [isDraggings, setDraggingsState] = (0, import_react2.useState)(new Array(values.length).fill(false));
  const isEditablesRef = (0, import_react2.useRef)(new Array(values.length).fill(true));
  const [focusedIndex, setFocusedIndex] = (0, import_react2.useState)(void 0);
  const valuesRef = (0, import_react2.useRef)(values);
  const isDraggingsRef = (0, import_react2.useRef)(isDraggings);
  let setValues = (values2) => {
    valuesRef.current = values2;
    setValuesState(values2);
  };
  let setDraggings = (draggings) => {
    isDraggingsRef.current = draggings;
    setDraggingsState(draggings);
  };
  function getValuePercent(value2) {
    return (value2 - minValue) / (maxValue - minValue);
  }
  function getThumbMinValue(index) {
    return index === 0 ? minValue : values[index - 1];
  }
  function getThumbMaxValue(index) {
    return index === values.length - 1 ? maxValue : values[index + 1];
  }
  function isThumbEditable(index) {
    return isEditablesRef.current[index];
  }
  function setThumbEditable(index, editable) {
    isEditablesRef.current[index] = editable;
  }
  function updateValue(index, value2) {
    if (isDisabled || !isThumbEditable(index))
      return;
    const thisMin = getThumbMinValue(index);
    const thisMax = getThumbMaxValue(index);
    value2 = (0, $9446cca9a3875146$export$cb6e0bb50bc19463)(value2, thisMin, thisMax, step);
    let newValues = $28f99e3e86e6ec45$var$replaceIndex(valuesRef.current, index, value2);
    setValues(newValues);
  }
  function updateDragging(index, dragging) {
    if (isDisabled || !isThumbEditable(index))
      return;
    if (dragging)
      valuesRef.current = values;
    const wasDragging = isDraggingsRef.current[index];
    isDraggingsRef.current = $28f99e3e86e6ec45$var$replaceIndex(isDraggingsRef.current, index, dragging);
    setDraggings(isDraggingsRef.current);
    if (onChangeEnd && wasDragging && !isDraggingsRef.current.some(Boolean))
      onChangeEnd(valuesRef.current);
  }
  function getFormattedValue(value2) {
    return formatter.format(value2);
  }
  function setThumbPercent(index, percent) {
    updateValue(index, getPercentValue(percent));
  }
  function getRoundedValue(value2) {
    return Math.round((value2 - minValue) / step) * step + minValue;
  }
  function getPercentValue(percent) {
    const val = percent * (maxValue - minValue) + minValue;
    return (0, $9446cca9a3875146$export$7d15b64cf5a3a4c4)(getRoundedValue(val), minValue, maxValue);
  }
  function incrementThumb(index, stepSize = 1) {
    let s = Math.max(stepSize, step);
    updateValue(index, (0, $9446cca9a3875146$export$cb6e0bb50bc19463)(values[index] + s, minValue, maxValue, step));
  }
  function decrementThumb(index, stepSize = 1) {
    let s = Math.max(stepSize, step);
    updateValue(index, (0, $9446cca9a3875146$export$cb6e0bb50bc19463)(values[index] - s, minValue, maxValue, step));
  }
  return {
    values,
    getThumbValue: (index) => values[index],
    setThumbValue: updateValue,
    setThumbPercent,
    isThumbDragging: (index) => isDraggings[index],
    setThumbDragging: updateDragging,
    focusedThumb: focusedIndex,
    setFocusedThumb: setFocusedIndex,
    getThumbPercent: (index) => getValuePercent(values[index]),
    getValuePercent,
    getThumbValueLabel: (index) => getFormattedValue(values[index]),
    getFormattedValue,
    getThumbMinValue,
    getThumbMaxValue,
    getPercentValue,
    isThumbEditable,
    setThumbEditable,
    incrementThumb,
    decrementThumb,
    step,
    pageSize,
    orientation,
    isDisabled
  };
}
function $28f99e3e86e6ec45$var$replaceIndex(array, index, value) {
  if (array[index] === value)
    return array;
  return [
    ...array.slice(0, index),
    value,
    ...array.slice(index + 1)
  ];
}
function $28f99e3e86e6ec45$var$convertValue(value) {
  if (value == null)
    return void 0;
  return Array.isArray(value) ? value : [
    value
  ];
}
function $28f99e3e86e6ec45$var$createOnChange(value, defaultValue, onChange) {
  return (newValue) => {
    if (typeof value === "number" || typeof defaultValue === "number")
      onChange === null || onChange === void 0 ? void 0 : onChange(newValue[0]);
    else
      onChange === null || onChange === void 0 ? void 0 : onChange(newValue);
  };
}

// node_modules/@react-stately/color/dist/useColorSliderState.mjs
var import_react3 = __toESM(require_react(), 1);
function $25a25ac0d1624665$export$57bc203e1c9c6d44(props) {
  let { channel, colorSpace, value, defaultValue, onChange, locale, ...otherProps } = props;
  if (value == null && defaultValue == null)
    throw new Error("useColorSliderState requires a value or defaultValue");
  let [colorValue, setColor] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(value && (0, $799cddbef784668f$export$4cde5df63f53f473)(value), defaultValue && (0, $799cddbef784668f$export$4cde5df63f53f473)(defaultValue), onChange);
  let color = (0, import_react3.useMemo)(() => colorSpace && colorValue ? colorValue.toFormat(colorSpace) : colorValue, [
    colorValue,
    colorSpace
  ]);
  let sliderState = (0, $28f99e3e86e6ec45$export$e5fda3247f5d67f9)({
    ...color.getChannelRange(channel),
    ...otherProps,
    // Unused except in getThumbValueLabel, which is overridden below. null to appease TypeScript.
    numberFormatter: null,
    value: color.getChannelValue(channel),
    onChange(v) {
      setColor(color.withChannelValue(channel, v));
    },
    onChangeEnd(v) {
      if (props.onChangeEnd)
        props.onChangeEnd(color.withChannelValue(channel, v));
    }
  });
  let { step, pageSize } = color.getChannelRange(channel);
  return {
    ...sliderState,
    value: color,
    setValue(value2) {
      setColor((0, $799cddbef784668f$export$4cde5df63f53f473)(value2));
    },
    getDisplayColor() {
      switch (channel) {
        case "hue":
          return (0, $799cddbef784668f$export$6e865ea70d7724f)(`hsl(${color.getChannelValue("hue")}, 100%, 50%)`);
        case "lightness":
        case "brightness":
        case "saturation":
        case "red":
        case "green":
        case "blue":
          return color.withChannelValue("alpha", 1);
        case "alpha":
          return color;
        default:
          throw new Error("Unknown color channel: " + channel);
      }
    },
    getThumbValueLabel() {
      return color.formatChannelValue(channel, locale);
    },
    step,
    pageSize,
    isDragging: sliderState.isThumbDragging(0)
  };
}

// node_modules/@react-stately/color/dist/useColorWheelState.mjs
var import_react4 = __toESM(require_react(), 1);
var $ee4262c74a467b07$var$DEFAULT_COLOR = (0, $799cddbef784668f$export$6e865ea70d7724f)("hsl(0, 100%, 50%)");
function $ee4262c74a467b07$var$roundToStep(value, step) {
  return Math.round(value / step) * step;
}
function $ee4262c74a467b07$var$mod(n, m) {
  return (n % m + m) % m;
}
function $ee4262c74a467b07$var$roundDown(v) {
  let r = Math.floor(v);
  if (r === v)
    return v - 1;
  else
    return r;
}
function $ee4262c74a467b07$var$degToRad(deg) {
  return deg * Math.PI / 180;
}
function $ee4262c74a467b07$var$radToDeg(rad) {
  return rad * 180 / Math.PI;
}
function $ee4262c74a467b07$var$angleToCartesian(angle, radius) {
  let rad = $ee4262c74a467b07$var$degToRad(360 - angle + 90);
  let x = Math.sin(rad) * radius;
  let y = Math.cos(rad) * radius;
  return {
    x,
    y
  };
}
function $ee4262c74a467b07$var$cartesianToAngle(x, y, radius) {
  let deg = $ee4262c74a467b07$var$radToDeg(Math.atan2(y / radius, x / radius));
  return (deg + 360) % 360;
}
function $ee4262c74a467b07$export$f4301076d9336137(props) {
  let { defaultValue, onChange, onChangeEnd } = props;
  if (!props.value && !defaultValue)
    defaultValue = $ee4262c74a467b07$var$DEFAULT_COLOR;
  let [stateValue, setValueState] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)((0, $799cddbef784668f$export$4cde5df63f53f473)(props.value), (0, $799cddbef784668f$export$4cde5df63f53f473)(defaultValue), onChange);
  let value = (0, import_react4.useMemo)(() => {
    let colorSpace = stateValue.getColorSpace();
    return colorSpace === "hsl" || colorSpace === "hsb" ? stateValue : stateValue.toFormat("hsl");
  }, [
    stateValue
  ]);
  let valueRef = (0, import_react4.useRef)(value);
  let setValue = (value2) => {
    valueRef.current = value2;
    setValueState(value2);
  };
  let channelRange = value.getChannelRange("hue");
  let { minValue: minValueX, maxValue: maxValueX, step, pageSize: pageStep } = channelRange;
  let [isDragging, setDragging] = (0, import_react4.useState)(false);
  let isDraggingRef = (0, import_react4.useRef)(false);
  let hue = value.getChannelValue("hue");
  function setHue(v) {
    if (v > 360)
      v = 0;
    v = $ee4262c74a467b07$var$roundToStep($ee4262c74a467b07$var$mod(v, 360), step);
    if (hue !== v) {
      let color = value.withChannelValue("hue", v);
      setValue(color);
    }
  }
  return {
    value,
    step,
    pageStep,
    setValue(v) {
      let color = (0, $799cddbef784668f$export$4cde5df63f53f473)(v);
      setValue(color);
    },
    hue,
    setHue,
    setHueFromPoint(x, y, radius) {
      setHue($ee4262c74a467b07$var$cartesianToAngle(x, y, radius));
    },
    getThumbPosition(radius) {
      return $ee4262c74a467b07$var$angleToCartesian(value.getChannelValue("hue"), radius);
    },
    increment(stepSize = 1) {
      let s = Math.max(stepSize, step);
      let newValue = hue + s;
      if (newValue >= maxValueX)
        newValue = minValueX;
      setHue($ee4262c74a467b07$var$roundToStep($ee4262c74a467b07$var$mod(newValue, 360), s));
    },
    decrement(stepSize = 1) {
      let s = Math.max(stepSize, step);
      if (hue === 0)
        setHue($ee4262c74a467b07$var$roundDown(360 / s) * s);
      else
        setHue($ee4262c74a467b07$var$roundToStep($ee4262c74a467b07$var$mod(hue - s, 360), s));
    },
    setDragging(isDragging2) {
      let wasDragging = isDraggingRef.current;
      isDraggingRef.current = isDragging2;
      if (onChangeEnd && !isDragging2 && wasDragging)
        onChangeEnd(valueRef.current);
      setDragging(isDragging2);
    },
    isDragging,
    getDisplayColor() {
      return value.toFormat("hsl").withChannelValue("saturation", 100).withChannelValue("lightness", 50).withChannelValue("alpha", 1);
    },
    isDisabled: props.isDisabled || false
  };
}

// node_modules/@react-stately/color/dist/useColor.mjs
var import_react5 = __toESM(require_react(), 1);
function $aa90ad8b2b1d015f$export$5aadd9c0606af5c2(value) {
  return (0, import_react5.useMemo)(() => {
    if (typeof value === "string")
      try {
        return (0, $799cddbef784668f$export$6e865ea70d7724f)(value);
      } catch (err) {
        return void 0;
      }
    return value;
  }, [
    value
  ]);
}

// node_modules/@react-stately/form/dist/useFormValidationState.mjs
var import_react6 = __toESM(require_react(), 1);
var $e5be200c675c3b3a$export$aca958c65c314e6c = {
  badInput: false,
  customError: false,
  patternMismatch: false,
  rangeOverflow: false,
  rangeUnderflow: false,
  stepMismatch: false,
  tooLong: false,
  tooShort: false,
  typeMismatch: false,
  valueMissing: false,
  valid: true
};
var $e5be200c675c3b3a$var$CUSTOM_VALIDITY_STATE = {
  ...$e5be200c675c3b3a$export$aca958c65c314e6c,
  customError: true,
  valid: false
};
var $e5be200c675c3b3a$export$dad6ae84456c676a = {
  isInvalid: false,
  validationDetails: $e5be200c675c3b3a$export$aca958c65c314e6c,
  validationErrors: []
};
var $e5be200c675c3b3a$export$571b5131b7e65c11 = (0, import_react6.createContext)({});
var $e5be200c675c3b3a$export$a763b9476acd3eb = "__formValidationState" + Date.now();
function $e5be200c675c3b3a$export$fc1a364ae1f3ff10(props) {
  if (props[$e5be200c675c3b3a$export$a763b9476acd3eb]) {
    let { realtimeValidation, displayValidation, updateValidation, resetValidation, commitValidation } = props[$e5be200c675c3b3a$export$a763b9476acd3eb];
    return {
      realtimeValidation,
      displayValidation,
      updateValidation,
      resetValidation,
      commitValidation
    };
  }
  return $e5be200c675c3b3a$var$useFormValidationStateImpl(props);
}
function $e5be200c675c3b3a$var$useFormValidationStateImpl(props) {
  let { isInvalid, validationState, name, value, builtinValidation, validate, validationBehavior = "aria" } = props;
  if (validationState)
    isInvalid || (isInvalid = validationState === "invalid");
  let controlledError = isInvalid !== void 0 ? {
    isInvalid,
    validationErrors: [],
    validationDetails: $e5be200c675c3b3a$var$CUSTOM_VALIDITY_STATE
  } : null;
  let clientError = (0, import_react6.useMemo)(() => $e5be200c675c3b3a$var$getValidationResult($e5be200c675c3b3a$var$runValidate(validate, value)), [
    validate,
    value
  ]);
  if (builtinValidation === null || builtinValidation === void 0 ? void 0 : builtinValidation.validationDetails.valid)
    builtinValidation = null;
  let serverErrors = (0, import_react6.useContext)($e5be200c675c3b3a$export$571b5131b7e65c11);
  let serverErrorMessages = (0, import_react6.useMemo)(() => {
    if (name)
      return Array.isArray(name) ? name.flatMap((name2) => $e5be200c675c3b3a$var$asArray(serverErrors[name2])) : $e5be200c675c3b3a$var$asArray(serverErrors[name]);
    return [];
  }, [
    serverErrors,
    name
  ]);
  let [lastServerErrors, setLastServerErrors] = (0, import_react6.useState)(serverErrors);
  let [isServerErrorCleared, setServerErrorCleared] = (0, import_react6.useState)(false);
  if (serverErrors !== lastServerErrors) {
    setLastServerErrors(serverErrors);
    setServerErrorCleared(false);
  }
  let serverError = (0, import_react6.useMemo)(() => $e5be200c675c3b3a$var$getValidationResult(isServerErrorCleared ? [] : serverErrorMessages), [
    isServerErrorCleared,
    serverErrorMessages
  ]);
  let nextValidation = (0, import_react6.useRef)($e5be200c675c3b3a$export$dad6ae84456c676a);
  let [currentValidity, setCurrentValidity] = (0, import_react6.useState)($e5be200c675c3b3a$export$dad6ae84456c676a);
  let lastError = (0, import_react6.useRef)($e5be200c675c3b3a$export$dad6ae84456c676a);
  let commitValidation = () => {
    if (!commitQueued)
      return;
    setCommitQueued(false);
    let error = clientError || builtinValidation || nextValidation.current;
    if (!$e5be200c675c3b3a$var$isEqualValidation(error, lastError.current)) {
      lastError.current = error;
      setCurrentValidity(error);
    }
  };
  let [commitQueued, setCommitQueued] = (0, import_react6.useState)(false);
  (0, import_react6.useEffect)(commitValidation);
  let realtimeValidation = controlledError || serverError || clientError || builtinValidation || $e5be200c675c3b3a$export$dad6ae84456c676a;
  let displayValidation = validationBehavior === "native" ? controlledError || serverError || currentValidity : controlledError || serverError || clientError || builtinValidation || currentValidity;
  return {
    realtimeValidation,
    displayValidation,
    updateValidation(value2) {
      if (validationBehavior === "aria" && !$e5be200c675c3b3a$var$isEqualValidation(currentValidity, value2))
        setCurrentValidity(value2);
      else
        nextValidation.current = value2;
    },
    resetValidation() {
      let error = $e5be200c675c3b3a$export$dad6ae84456c676a;
      if (!$e5be200c675c3b3a$var$isEqualValidation(error, lastError.current)) {
        lastError.current = error;
        setCurrentValidity(error);
      }
      if (validationBehavior === "native")
        setCommitQueued(false);
      setServerErrorCleared(true);
    },
    commitValidation() {
      if (validationBehavior === "native")
        setCommitQueued(true);
      setServerErrorCleared(true);
    }
  };
}
function $e5be200c675c3b3a$var$asArray(v) {
  if (!v)
    return [];
  return Array.isArray(v) ? v : [
    v
  ];
}
function $e5be200c675c3b3a$var$runValidate(validate, value) {
  if (typeof validate === "function") {
    let e = validate(value);
    if (e && typeof e !== "boolean")
      return $e5be200c675c3b3a$var$asArray(e);
  }
  return [];
}
function $e5be200c675c3b3a$var$getValidationResult(errors) {
  return errors.length ? {
    isInvalid: true,
    validationErrors: errors,
    validationDetails: $e5be200c675c3b3a$var$CUSTOM_VALIDITY_STATE
  } : null;
}
function $e5be200c675c3b3a$var$isEqualValidation(a, b) {
  if (a === b)
    return true;
  return a && b && a.isInvalid === b.isInvalid && a.validationErrors.length === b.validationErrors.length && a.validationErrors.every((a2, i) => a2 === b.validationErrors[i]) && Object.entries(a.validationDetails).every(([k, v]) => b.validationDetails[k] === v);
}

// node_modules/@react-stately/color/dist/useColorFieldState.mjs
var import_react7 = __toESM(require_react(), 1);
var $b335ada08155d9c0$var$MIN_COLOR = (0, $799cddbef784668f$export$6e865ea70d7724f)("#000000");
var $b335ada08155d9c0$var$MAX_COLOR = (0, $799cddbef784668f$export$6e865ea70d7724f)("#FFFFFF");
var $b335ada08155d9c0$var$MIN_COLOR_INT = $b335ada08155d9c0$var$MIN_COLOR.toHexInt();
var $b335ada08155d9c0$var$MAX_COLOR_INT = $b335ada08155d9c0$var$MAX_COLOR.toHexInt();
function $b335ada08155d9c0$export$d52a01683abdfcd6(props) {
  let { value, defaultValue, onChange } = props;
  let { step } = $b335ada08155d9c0$var$MIN_COLOR.getChannelRange("red");
  let initialValue = (0, $aa90ad8b2b1d015f$export$5aadd9c0606af5c2)(value);
  let initialDefaultValue = (0, $aa90ad8b2b1d015f$export$5aadd9c0606af5c2)(defaultValue);
  let [colorValue, setColorValue] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(initialValue, initialDefaultValue, onChange);
  let [inputValue, setInputValue] = (0, import_react7.useState)(() => (value || defaultValue) && colorValue ? colorValue.toString("hex") : "");
  let validation = (0, $e5be200c675c3b3a$export$fc1a364ae1f3ff10)({
    ...props,
    value: colorValue
  });
  let safelySetColorValue = (newColor) => {
    if (!colorValue || !newColor) {
      setColorValue(newColor);
      return;
    }
    if (newColor.toHexInt() !== colorValue.toHexInt()) {
      setColorValue(newColor);
      return;
    }
  };
  let [prevValue, setPrevValue] = (0, import_react7.useState)(colorValue);
  if (prevValue !== colorValue) {
    setInputValue(colorValue ? colorValue.toString("hex") : "");
    setPrevValue(colorValue);
  }
  let parsedValue = (0, import_react7.useMemo)(() => {
    let color;
    try {
      color = (0, $799cddbef784668f$export$6e865ea70d7724f)(inputValue.startsWith("#") ? inputValue : `#${inputValue}`);
    } catch (err) {
      color = null;
    }
    return color;
  }, [
    inputValue
  ]);
  let commit = () => {
    if (!inputValue.length) {
      safelySetColorValue(null);
      setInputValue(value === void 0 ? "" : colorValue.toString("hex"));
      return;
    }
    if (parsedValue == null) {
      setInputValue(colorValue ? colorValue.toString("hex") : "");
      return;
    }
    safelySetColorValue(parsedValue);
    let newColorValue = "";
    if (colorValue)
      newColorValue = colorValue.toString("hex");
    setInputValue(newColorValue);
  };
  let increment = () => {
    let newValue = $b335ada08155d9c0$var$addColorValue(parsedValue, step);
    if (newValue === colorValue)
      setInputValue(newValue.toString("hex"));
    safelySetColorValue(newValue);
    validation.commitValidation();
  };
  let decrement = () => {
    let newValue = $b335ada08155d9c0$var$addColorValue(parsedValue, -step);
    if (newValue === colorValue)
      setInputValue(newValue.toString("hex"));
    safelySetColorValue(newValue);
    validation.commitValidation();
  };
  let incrementToMax = () => safelySetColorValue($b335ada08155d9c0$var$MAX_COLOR);
  let decrementToMin = () => safelySetColorValue($b335ada08155d9c0$var$MIN_COLOR);
  let validate = (value2) => {
    var _value_match;
    return value2 === "" || !!((_value_match = value2.match(/^#?[0-9a-f]{0,6}$/i)) === null || _value_match === void 0 ? void 0 : _value_match[0]);
  };
  return {
    ...validation,
    validate,
    colorValue,
    inputValue,
    setInputValue,
    commit,
    increment,
    incrementToMax,
    decrement,
    decrementToMin
  };
}
function $b335ada08155d9c0$var$addColorValue(color, step) {
  let newColor = color ? color : $b335ada08155d9c0$var$MIN_COLOR;
  let colorInt = newColor.toHexInt();
  let clampInt = Math.min(Math.max(colorInt + step, $b335ada08155d9c0$var$MIN_COLOR_INT), $b335ada08155d9c0$var$MAX_COLOR_INT);
  if (clampInt !== colorInt) {
    let newColorString = `#${clampInt.toString(16).padStart(6, "0").toUpperCase()}`;
    newColor = (0, $799cddbef784668f$export$6e865ea70d7724f)(newColorString);
  }
  return newColor;
}

// node_modules/@react-stately/numberfield/dist/useNumberFieldState.mjs
var import_react8 = __toESM(require_react(), 1);
function $de67e98908f0c6ee$export$7f629e9dc1ecf37c(props) {
  let { minValue, maxValue, step, formatOptions, value, defaultValue = NaN, onChange, locale, isDisabled, isReadOnly } = props;
  if (value === null)
    value = NaN;
  if (value !== void 0 && !isNaN(value)) {
    if (step !== void 0 && !isNaN(step))
      value = (0, $9446cca9a3875146$export$cb6e0bb50bc19463)(value, minValue, maxValue, step);
    else
      value = (0, $9446cca9a3875146$export$7d15b64cf5a3a4c4)(value, minValue, maxValue);
  }
  if (!isNaN(defaultValue)) {
    if (step !== void 0 && !isNaN(step))
      defaultValue = (0, $9446cca9a3875146$export$cb6e0bb50bc19463)(defaultValue, minValue, maxValue, step);
    else
      defaultValue = (0, $9446cca9a3875146$export$7d15b64cf5a3a4c4)(defaultValue, minValue, maxValue);
  }
  let [numberValue, setNumberValue] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(value, isNaN(defaultValue) ? NaN : defaultValue, onChange);
  let [inputValue, setInputValue] = (0, import_react8.useState)(() => isNaN(numberValue) ? "" : new (0, $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5)(locale, formatOptions).format(numberValue));
  let numberParser = (0, import_react8.useMemo)(() => new (0, $6c7bd7858deea686$export$cd11ab140839f11d)(locale, formatOptions), [
    locale,
    formatOptions
  ]);
  let numberingSystem = (0, import_react8.useMemo)(() => numberParser.getNumberingSystem(inputValue), [
    numberParser,
    inputValue
  ]);
  let formatter = (0, import_react8.useMemo)(() => new (0, $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5)(locale, {
    ...formatOptions,
    numberingSystem
  }), [
    locale,
    formatOptions,
    numberingSystem
  ]);
  let intlOptions = (0, import_react8.useMemo)(() => formatter.resolvedOptions(), [
    formatter
  ]);
  let format = (0, import_react8.useCallback)((value2) => isNaN(value2) || value2 === null ? "" : formatter.format(value2), [
    formatter
  ]);
  let validation = (0, $e5be200c675c3b3a$export$fc1a364ae1f3ff10)({
    ...props,
    value: numberValue
  });
  let clampStep = step !== void 0 && !isNaN(step) ? step : 1;
  if (intlOptions.style === "percent" && (step === void 0 || isNaN(step)))
    clampStep = 0.01;
  let [prevValue, setPrevValue] = (0, import_react8.useState)(numberValue);
  let [prevLocale, setPrevLocale] = (0, import_react8.useState)(locale);
  let [prevFormatOptions, setPrevFormatOptions] = (0, import_react8.useState)(formatOptions);
  if (!Object.is(numberValue, prevValue) || locale !== prevLocale || formatOptions !== prevFormatOptions) {
    setInputValue(format(numberValue));
    setPrevValue(numberValue);
    setPrevLocale(locale);
    setPrevFormatOptions(formatOptions);
  }
  let parsedValue = (0, import_react8.useMemo)(() => numberParser.parse(inputValue), [
    numberParser,
    inputValue
  ]);
  let commit = () => {
    if (!inputValue.length) {
      setNumberValue(NaN);
      setInputValue(value === void 0 ? "" : format(numberValue));
      return;
    }
    if (isNaN(parsedValue)) {
      setInputValue(format(numberValue));
      return;
    }
    let clampedValue;
    if (step === void 0 || isNaN(step))
      clampedValue = (0, $9446cca9a3875146$export$7d15b64cf5a3a4c4)(parsedValue, minValue, maxValue);
    else
      clampedValue = (0, $9446cca9a3875146$export$cb6e0bb50bc19463)(parsedValue, minValue, maxValue, step);
    clampedValue = numberParser.parse(format(clampedValue));
    setNumberValue(clampedValue);
    setInputValue(format(value === void 0 ? clampedValue : numberValue));
  };
  let safeNextStep = (operation, minMax = 0) => {
    let prev = parsedValue;
    if (isNaN(prev)) {
      let newValue = isNaN(minMax) ? 0 : minMax;
      return (0, $9446cca9a3875146$export$cb6e0bb50bc19463)(newValue, minValue, maxValue, clampStep);
    } else {
      let newValue = (0, $9446cca9a3875146$export$cb6e0bb50bc19463)(prev, minValue, maxValue, clampStep);
      if (operation === "+" && newValue > prev || operation === "-" && newValue < prev)
        return newValue;
      return (0, $9446cca9a3875146$export$cb6e0bb50bc19463)($de67e98908f0c6ee$var$handleDecimalOperation(operation, prev, clampStep), minValue, maxValue, clampStep);
    }
  };
  let increment = () => {
    let newValue = safeNextStep("+", minValue);
    if (newValue === numberValue)
      setInputValue(format(newValue));
    setNumberValue(newValue);
    validation.commitValidation();
  };
  let decrement = () => {
    let newValue = safeNextStep("-", maxValue);
    if (newValue === numberValue)
      setInputValue(format(newValue));
    setNumberValue(newValue);
    validation.commitValidation();
  };
  let incrementToMax = () => {
    if (maxValue != null) {
      setNumberValue((0, $9446cca9a3875146$export$cb6e0bb50bc19463)(maxValue, minValue, maxValue, clampStep));
      validation.commitValidation();
    }
  };
  let decrementToMin = () => {
    if (minValue != null) {
      setNumberValue(minValue);
      validation.commitValidation();
    }
  };
  let canIncrement = (0, import_react8.useMemo)(() => !isDisabled && !isReadOnly && (isNaN(parsedValue) || maxValue === void 0 || isNaN(maxValue) || (0, $9446cca9a3875146$export$cb6e0bb50bc19463)(parsedValue, minValue, maxValue, clampStep) > parsedValue || $de67e98908f0c6ee$var$handleDecimalOperation("+", parsedValue, clampStep) <= maxValue), [
    isDisabled,
    isReadOnly,
    minValue,
    maxValue,
    clampStep,
    parsedValue
  ]);
  let canDecrement = (0, import_react8.useMemo)(() => !isDisabled && !isReadOnly && (isNaN(parsedValue) || minValue === void 0 || isNaN(minValue) || (0, $9446cca9a3875146$export$cb6e0bb50bc19463)(parsedValue, minValue, maxValue, clampStep) < parsedValue || $de67e98908f0c6ee$var$handleDecimalOperation("-", parsedValue, clampStep) >= minValue), [
    isDisabled,
    isReadOnly,
    minValue,
    maxValue,
    clampStep,
    parsedValue
  ]);
  let validate = (value2) => numberParser.isValidPartialNumber(value2, minValue, maxValue);
  return {
    ...validation,
    validate,
    increment,
    incrementToMax,
    decrement,
    decrementToMin,
    canIncrement,
    canDecrement,
    minValue,
    maxValue,
    numberValue: parsedValue,
    setNumberValue,
    setInputValue,
    inputValue,
    commit
  };
}
function $de67e98908f0c6ee$var$handleDecimalOperation(operator, value1, value2) {
  let result = operator === "+" ? value1 + value2 : value1 - value2;
  if (value1 % 1 !== 0 || value2 % 1 !== 0) {
    const value1Decimal = value1.toString().split(".");
    const value2Decimal = value2.toString().split(".");
    const value1DecimalLength = value1Decimal[1] && value1Decimal[1].length || 0;
    const value2DecimalLength = value2Decimal[1] && value2Decimal[1].length || 0;
    const multiplier = Math.pow(10, Math.max(value1DecimalLength, value2DecimalLength));
    value1 = Math.round(value1 * multiplier);
    value2 = Math.round(value2 * multiplier);
    result = operator === "+" ? value1 + value2 : value1 - value2;
    result /= multiplier;
  }
  return result;
}

// node_modules/@react-stately/color/dist/useColorChannelFieldState.mjs
var import_react9 = __toESM(require_react(), 1);
function $31a863bb88e75dd6$export$b9fc0d69c9190c4a(props) {
  let { channel, colorSpace, locale } = props;
  let initialValue = (0, $aa90ad8b2b1d015f$export$5aadd9c0606af5c2)(props.value);
  let initialDefaultValue = (0, $aa90ad8b2b1d015f$export$5aadd9c0606af5c2)(props.defaultValue || "#0000");
  let [colorValue, setColor] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(initialValue || void 0, initialDefaultValue, props.onChange);
  let color = (0, import_react9.useMemo)(() => colorSpace && colorValue ? colorValue.toFormat(colorSpace) : colorValue, [
    colorValue,
    colorSpace
  ]);
  let value = color.getChannelValue(channel);
  let range = color.getChannelRange(channel);
  let formatOptions = (0, import_react9.useMemo)(() => color.getChannelFormatOptions(channel), [
    color,
    channel
  ]);
  let multiplier = formatOptions.style === "percent" && range.maxValue === 100 ? 100 : 1;
  let numberFieldState = (0, $de67e98908f0c6ee$export$7f629e9dc1ecf37c)({
    locale,
    value: value / multiplier,
    onChange: (v) => setColor(color.withChannelValue(channel, v * multiplier)),
    minValue: range.minValue / multiplier,
    maxValue: range.maxValue / multiplier,
    step: range.step / multiplier,
    formatOptions
  });
  return {
    ...numberFieldState,
    colorValue: color
  };
}

// node_modules/@react-stately/color/dist/useColorPickerState.mjs
function $309d2b7669014898$export$dc6b73b623f8645f(props) {
  let value = (0, $aa90ad8b2b1d015f$export$5aadd9c0606af5c2)(props.value);
  let defaultValue = (0, $aa90ad8b2b1d015f$export$5aadd9c0606af5c2)(props.defaultValue || "#0000");
  let [color, setColor] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(value || void 0, defaultValue, props.onChange);
  return {
    color,
    setColor(color2) {
      setColor(color2 || (0, $799cddbef784668f$export$6e865ea70d7724f)("#0000"));
    }
  };
}
export {
  $799cddbef784668f$export$1c0c08912582810c as getColorChannels,
  $799cddbef784668f$export$6e865ea70d7724f as parseColor,
  $6e14a98a7f67141d$export$6df7f0e2cabc7eef as useColorAreaState,
  $31a863bb88e75dd6$export$b9fc0d69c9190c4a as useColorChannelFieldState,
  $b335ada08155d9c0$export$d52a01683abdfcd6 as useColorFieldState,
  $309d2b7669014898$export$dc6b73b623f8645f as useColorPickerState,
  $25a25ac0d1624665$export$57bc203e1c9c6d44 as useColorSliderState,
  $ee4262c74a467b07$export$f4301076d9336137 as useColorWheelState
};
//# sourceMappingURL=@react-stately_color.js.map
