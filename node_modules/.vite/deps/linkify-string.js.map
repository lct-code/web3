{
  "version": 3,
  "sources": ["../../linkify-string/dist/linkify-string.es.js"],
  "sourcesContent": ["import { Options, tokenize } from 'linkifyjs';\n\n/**\n\tConvert strings of text into linkable HTML text\n*/\nfunction escapeText(text) {\n  return text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n}\nfunction escapeAttr(href) {\n  return href.replace(/\"/g, '&quot;');\n}\nfunction attributesToString(attributes) {\n  const result = [];\n  for (const attr in attributes) {\n    let val = attributes[attr] + '';\n    result.push(`${attr}=\"${escapeAttr(val)}\"`);\n  }\n  return result.join(' ');\n}\nfunction defaultRender(_ref) {\n  let {\n    tagName,\n    attributes,\n    content\n  } = _ref;\n  return `<${tagName} ${attributesToString(attributes)}>${escapeText(content)}</${tagName}>`;\n}\n\n/**\n * Convert a plan text string to an HTML string with links. Expects that the\n * given strings does not contain any HTML entities. Use the linkify-html\n * interface if you need to parse HTML entities.\n *\n * @param {string} str string to linkify\n * @param {import('linkifyjs').Opts} [opts] overridable options\n * @returns {string}\n */\nfunction linkifyStr(str, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  opts = new Options(opts, defaultRender);\n  const tokens = tokenize(str);\n  const result = [];\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    if (token.t === 'nl' && opts.get('nl2br')) {\n      result.push('<br>\\n');\n    } else if (!token.isLink || !opts.check(token)) {\n      result.push(escapeText(token.toString()));\n    } else {\n      result.push(opts.render(token));\n    }\n  }\n  return result.join('');\n}\nif (!String.prototype.linkify) {\n  Object.defineProperty(String.prototype, 'linkify', {\n    writable: false,\n    value: function linkify(options) {\n      return linkifyStr(this, options);\n    }\n  });\n}\n\nexport { linkifyStr as default };\n"],
  "mappings": ";;;;;;;AAKA,SAAS,WAAW,MAAM;AACxB,SAAO,KAAK,QAAQ,MAAM,OAAO,EAAE,QAAQ,MAAM,MAAM,EAAE,QAAQ,MAAM,MAAM;AAC/E;AACA,SAAS,WAAW,MAAM;AACxB,SAAO,KAAK,QAAQ,MAAM,QAAQ;AACpC;AACA,SAAS,mBAAmB,YAAY;AACtC,QAAM,SAAS,CAAC;AAChB,aAAW,QAAQ,YAAY;AAC7B,QAAI,MAAM,WAAW,IAAI,IAAI;AAC7B,WAAO,KAAK,GAAG,IAAI,KAAK,WAAW,GAAG,CAAC,GAAG;AAAA,EAC5C;AACA,SAAO,OAAO,KAAK,GAAG;AACxB;AACA,SAAS,cAAc,MAAM;AAC3B,MAAI;AAAA,IACF;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAAI;AACJ,SAAO,IAAI,OAAO,IAAI,mBAAmB,UAAU,CAAC,IAAI,WAAW,OAAO,CAAC,KAAK,OAAO;AACzF;AAWA,SAAS,WAAW,KAAK,MAAM;AAC7B,MAAI,SAAS,QAAQ;AACnB,WAAO,CAAC;AAAA,EACV;AACA,SAAO,IAAI,QAAQ,MAAM,aAAa;AACtC,QAAM,SAAS,SAAS,GAAG;AAC3B,QAAM,SAAS,CAAC;AAChB,WAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACtC,UAAM,QAAQ,OAAO,CAAC;AACtB,QAAI,MAAM,MAAM,QAAQ,KAAK,IAAI,OAAO,GAAG;AACzC,aAAO,KAAK,QAAQ;AAAA,IACtB,WAAW,CAAC,MAAM,UAAU,CAAC,KAAK,MAAM,KAAK,GAAG;AAC9C,aAAO,KAAK,WAAW,MAAM,SAAS,CAAC,CAAC;AAAA,IAC1C,OAAO;AACL,aAAO,KAAK,KAAK,OAAO,KAAK,CAAC;AAAA,IAChC;AAAA,EACF;AACA,SAAO,OAAO,KAAK,EAAE;AACvB;AACA,IAAI,CAAC,OAAO,UAAU,SAAS;AAC7B,SAAO,eAAe,OAAO,WAAW,WAAW;AAAA,IACjD,UAAU;AAAA,IACV,OAAO,SAAS,QAAQ,SAAS;AAC/B,aAAO,WAAW,MAAM,OAAO;AAAA,IACjC;AAAA,EACF,CAAC;AACH;",
  "names": []
}
